<NameSpace
 X="150"
 Y="60"
 Width="100"
 Height="50"
 Name="ReleaseSpeedMonitoring"
 Guid="2ef47700-2b29-4937-bb37-0e93c0385ae9"
>
<NameSpaces>
<NameSpaceRef
 Name="SupervisionStatus"
 Guid="2dcdf9ae-25f0-4025-83a0-eb82a2f210ec"
>
</NameSpaceRef></NameSpaces>
<Functions>
<Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="660"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ComputeReleaseSpeedForTarget"
 Guid="30407de2-57ae-4452-9c69-63a754f35b2c"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="adabca0e-b12c-4050-94f6-9573c79ef922"
>
</ReqRef><ReqRef
 Id="5b7d2c0d-92d5-4743-bbe3-847b2546e103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="85c7798c-59e3-47d5-8ff7-8df3688ecc58"
>
</ReqRef><Comment>Computes the value of the release speed, by iterating the function VreleaseFunction.</Comment>
<Parameters>
<Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="aTarget"
 Guid="8809f63d-2e33-47d3-b643-a3629f325926"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="9226eef6-02fb-4694-b13c-ddda96d35d5e"
>
<PreConditions>
<PreCondition
 Guid="cfb74eb7-5b05-4774-b2b9-0f958610469d"
><Comment>This is the condition for the inequations in 3.13.9.4.8.2 to have a solution, derived from the most permissive cases of these inequations.</Comment>
aTarget.Speed &lt;= DecelerationCurves.EBD_Target(
    Distance=&gt;d_tripEOA()+Dbec(aTarget.Speed),
    aTarget=&gt;aTarget
) - Vdelta0rsob(aTarget.Speed) + 1.0</PreCondition></PreConditions>
<Expression>STABILIZE
    VreleaseFunction ( Vrelease_prev =&gt; (PREVIOUS + CURRENT)/2.0, aTarget =&gt; aTarget )
INITIAL_VALUE
    aTarget.Speed
STOP_CONDITION
    BaseTypes.AbsoluteSpeed ( CURRENT - PREVIOUS ) &lt;= epsilon</Expression>
</Case><Case
 Name="Otherwise"
 Guid="a8f6ed86-5166-443e-b284-8ce4792d4d49"
>
<Expression>aTarget.Speed</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="220"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="d_EBI"
 Guid="1db9768f-f73d-453e-b0db-b4fd46e74e53"
>
<ReqRef
 Id="7d29645c-18cf-4661-9edb-e3fcb091bc29"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ee407023-ec73-4873-a624-f5b556101e62"
>
</ReqRef><ReqRef
 Id="0e91b525-553f-4f68-8970-8bed83e88948"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4d463fc5-dd8f-44c4-b2ca-e79b0d68ab04"
>
</ReqRef><ReqRef
 Id="faa860d4-6ec0-42c7-921a-65ae72f044ad"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e344c003-f6a4-4793-9786-9cafd3450f61"
>
</ReqRef><Comment>Provides the location of the EBI supervision limit.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease"
 Guid="2668f18b-5764-40a5-abb1-6a5717bbc939"
>
</Parameter><Parameter
 Type="Boolean"
 Name="EstimatedAccelerationSetToZero"
 Guid="ca0dae3f-9c52-4098-9a92-385c71b8e619"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="1d0d3250-0301-4809-915d-d662a0e65dcd"
>
<Expression>DistanceForSpeed (
    Function =&gt; DecelerationCurves.EBD,
    Speed =&gt; Vrelease + f41 ( Vrelease ) )
- BaseTypes.SpeedToMS (Vrelease + f41(Vrelease)) * ( DecelerationCurves.T_berem(EstimatedAccelerationSetToZero) + DecelerationCurves.T_traction(EstimatedAccelerationSetToZero) )</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="660"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Dbec"
 Guid="d9b30827-9518-41f5-830b-d883cbab5cf2"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d422ebe2-7de0-45d9-964b-85d7093e88b0"
>
</ReqRef><ReqRef
 Id="5b7d2c0d-92d5-4743-bbe3-847b2546e103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a72951d1-9199-48e7-aead-09f9ead45380"
>
</ReqRef><Comment>The distance travelled in the time interval between a brake command being given and the brakes actually being applied.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease"
 Guid="af1462c0-1c70-4255-b967-7c239f548024"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="17beface-fcb0-4eb8-b204-80baed457e28"
>
<Expression>BaseTypes.SpeedToMS( Vrelease + Vdelta0rsob ( Vrelease ) ) * ( DecelerationCurves.T_traction(EstimatedAccelerationSetToZero=&gt;True) + DecelerationCurves.T_berem(EstimatedAccelerationSetToZero=&gt;True) )</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="440"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Vdelta0rsob"
 Guid="0a66630e-2785-4d6e-8587-e8f1fc7481dc"
>
<ReqRef
 Id="dfe813b0-9500-4f66-bdc1-50df0c88f0ca"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d892e73e-be13-42cf-841f-ee4b86c5907d"
>
</ReqRef><ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4b6a81b5-6812-4e7a-84ed-870e64af4a73"
>
</ReqRef><Comment>Computes the compensation of the inaccuracy of the speed measurement. For speed greater than 30km/h, the value is computed using the formula (1/47) * Speed + 7 - (1/47)</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease"
 Guid="3fcb6864-906f-470d-be46-65919de270c8"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Compensation of inaccuracy not inhibited"
 Guid="564e1949-717c-4079-b079-2b808139515f"
>
<PreConditions>
<PreCondition
 Guid="13f4ccc3-2ef6-4202-bfa6-444572980157"
>NOT NationalValues.CompensationOfInaccuracyOfTheSpeedIsInhibited()</PreCondition></PreConditions>
<Expression>BaseTypes.MaxSpeed ( X1 =&gt;  f41 ( Vrelease) , X2 =&gt; Odometry.Accuracy.V_ura )</Expression>
</Case><Case
 Name="Compensation of inaccuracy inhibited"
 Guid="64753fd5-b08f-42dd-b63d-986faf9dcf85"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="660"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="d_tripEOA"
 Guid="34f87796-515a-4fb1-a93a-308560611a89"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6fa01089-45ce-41c2-be3f-4b366345870d"
>
</ReqRef><Comment>Computes the trip location related to the EOA.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="9746676d-2b14-4bef-813d-dd69f85e4882"
>
<Expression>d_EOA()
  +
alpha() * BTM.AntennaPosition ( DistanceInterval.Nom )
  +
BaseTypes.MaxDistance(
    X1 =&gt; ( 2.0 * BTM.BGLocationAccuracy() + 10.0 + 0.1 * d_EOA() ),
    X2 =&gt; ( TrainPosition.FrontEndPosition ( DistanceInterval.Max ) - TrainPosition.FrontEndPosition ( DistanceInterval.Min ) ) )</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="330"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="VreleaseFunction"
 Guid="ecb0df54-82ae-48d7-90f9-1834691e783b"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4dec8cf2-95ad-4692-a59d-0c9a0574890c"
>
</ReqRef><ReqRef
 Id="5b7d2c0d-92d5-4743-bbe3-847b2546e103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4ff7598e-7279-469c-b037-f3dee348c885"
>
</ReqRef><Comment>Used to compute the release speed on-board.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease_prev"
 Guid="1805aa0c-0d02-4572-98ea-abed7e76dbd5"
>
</Parameter><Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="aTarget"
 Guid="31c4457c-faad-4bcb-be68-c2dbf699fceb"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="First case"
 Guid="3b210ae9-da1a-49a4-833b-d680e1bdf28c"
>
<PreConditions>
<PreCondition
 Guid="af631487-52d1-4c71-a33c-05b2ff35e1b4"
>d_tripEOA() + Dbec ( Vrelease_prev ) &lt; DecelerationCurves.EBD_TargetForSpeed
(
    Vest =&gt; Odometry.TrainSpeed(),
    aTarget =&gt; aTarget,
    EstimatedAccelerationSetToZero =&gt; True
)</PreCondition><PreCondition
 Guid="b7339d74-9848-460e-b4e5-8cb15e9f1566"
>DecelerationCurves.EBD_Target ( Distance =&gt; ( d_tripEOA() + Dbec ( Vrelease_prev ) - Vdelta0rsob ( Vrelease_prev ) ), aTarget =&gt; aTarget ) &gt; aTarget.Speed</PreCondition></PreConditions>
<Expression>DecelerationCurves.EBD_Target ( Distance =&gt; ( d_tripEOA () + Dbec ( Vrelease_prev ) ), aTarget =&gt; aTarget ) - Vdelta0rsob ( Vrelease_prev )</Expression>
</Case><Case
 Name="Second case"
 Guid="40790e04-db87-45cd-b756-ba399d78f25b"
>
<Expression>aTarget.Speed</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="330"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ReleaseSpeedSupervisionApplicable"
 Guid="31554a0a-c45f-4ee3-ab5c-840e7667ab99"
>
<ReqRef
 Id="88ab50b9-74b8-45a8-b956-3f0754ac2824"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="947f12c5-54eb-40a3-ba57-90c05f22f094"
>
</ReqRef><Comment>Indicates if the release speed is applicable (a valid MA with a release speed has been received).</Comment>
<Parameters>
<Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="aTarget"
 Guid="ec3ee1ea-fda2-4335-a503-5b58f2354cee"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="MA available"
 Guid="4b6a7f82-b4ff-44e2-b744-58bde204ac28"
>
<PreConditions>
<PreCondition
 Guid="866eeedb-a5c6-4e3c-8ebd-dc36fd0b41d8"
>Available ( MA.MA )</PreCondition></PreConditions>
<Expression>ReleaseSpeed != 0.0 AND ( MA.IsSvL ( aTarget ) OR MA.IsEOA ( aTarget) )</Expression>
</Case><Case
 Name="No MA available"
 Guid="adc1392e-9efe-4722-8768-64a0c90b707b"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="220"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="StartRSM"
 Guid="754f4971-8117-451a-8763-1c1beb1094b3"
>
<ReqRef
 Id="a387bd06-4306-436c-ae73-a3faa509f059"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="47df3bc7-bdb1-4ef5-96e7-0315bef45b1c"
>
</ReqRef><Comment>Provides the start location of the release speed monitoring for the release speed received as parameter.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease"
 Guid="e203dfb6-fbb5-4357-8b6a-8267a6b58496"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No SvL"
 Guid="a78a9aee-7bab-4ef0-a3de-650f3eccbf65"
>
<PreConditions>
<PreCondition
 Guid="0d31f943-d426-48ba-a730-f200331c4b50"
>MA.SvL() == EMPTY</PreCondition></PreConditions>
<Expression>BaseTypes.MinDistance(
X1 =&gt; TargetSpeedMonitoring.d_SBI1(
        Vest =&gt; Vrelease,
        EstimatedAccelerationSetToZero =&gt; True ),
X2 =&gt; ComputeStartRSM_otherTargets(Vrelease)
)</Expression>
</Case><Case
 Name="Value"
 Guid="0b1798da-f019-46e0-b3b0-7e38f14c1cbd"
>
<Expression>BaseTypes.MinDistance(
X1 =&gt; BaseTypes.MinDistance(
    X1 =&gt; TargetSpeedMonitoring.d_SBI1(
        Vest =&gt; Vrelease,
        EstimatedAccelerationSetToZero =&gt; True
        ),
    X2 =&gt; TargetSpeedMonitoring.d_SBI2(
        Vest =&gt; Vrelease,
        aTarget =&gt; MA.SvL(),
        EstimatedAccelerationSetToZero =&gt; True
        )
    ),
X2 =&gt; ComputeStartRSM_otherTargets(Vrelease)
)</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="550"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="d_EOA"
 Guid="51ed030d-7fee-44a8-ae4e-97632defbc07"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="deb729f2-2e8a-4743-acfe-3ab48c50e292"
>
</ReqRef><Comment>Gives the location of EOA.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="84b3a91b-2eaa-41b9-b009-38522929c69a"
>
<Expression>MA.ClosestEOA().Location</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Cacheable="TRUE"
 Default=""
 X="220"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ReleaseSpeedValue"
 Guid="620fc2b7-2862-420c-99ff-4a7734ea3c16"
>
<ReqRef
 Id="84fba645-57ac-4105-828a-2d06de564e67"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5d40c1f7-fdd8-4f0c-85c7-0874d9ded79f"
>
</ReqRef><ReqRef
 Id="e5364c1f-ad1b-41da-a26e-1153431ce5b8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e8019d25-f8dc-4668-8401-6b119ee9af5b"
>
</ReqRef><Comment>Calculates the value of the release speed.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrel"
 Guid="d28ac036-41fe-4197-a581-5de5b2ba3614"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="ComputeOnBoard"
 Guid="ce4932b2-9469-496b-a526-9481e259b9b5"
>
<PreConditions>
<PreCondition
 Guid="285f2e84-9cb5-4250-a4ba-f84e839b607e"
>Vrel == BaseTypes.Speed.ComputeReleaseSpeedOnBoard</PreCondition></PreConditions>
<Expression>REDUCE
    TARGETS ( Targets1 =&gt; MRSP.SpeedRestrictions, Targets2 =&gt; EMPTY, Targets3 =&gt; EMPTY ) |
        StartRSM ( ComputeReleaseSpeed () ) &lt;= X.Location AND X.Location &lt;= d_tripEOA() OR
        StartRSM ( ComputeReleaseSpeed () ) &lt;= X.Location + BaseTypes.LengthToDistance ( X.Length ) AND X.Location + BaseTypes.LengthToDistance ( X.Length ) &lt;= ReleaseSpeedMonitoring.d_tripEOA() OR
        X.Location &lt;= StartRSM ( ComputeReleaseSpeed () ) AND d_tripEOA() &lt;= X.Location + BaseTypes.LengthToDistance ( X.Length )
USING X IN
    BaseTypes.MinSpeed ( X1 =&gt; X.Speed, X2 =&gt; RESULT )
INITIAL_VALUE
    ComputeReleaseSpeed ()</Expression>
</Case><Case
 Name="UseNV"
 Guid="473ac93a-a231-4196-ad90-c6d9f673cf56"
>
<PreConditions>
<PreCondition
 Guid="a57188f2-6ae9-4e5f-8e9e-95878dfeab23"
>Vrel == BaseTypes.Speed.UseNV</PreCondition></PreConditions>
<Expression>NationalValues.ReleaseSpeed()</Expression>
</Case><Case
 Name="FixedValue"
 Guid="4a1bbe8a-6104-426a-898f-76d737d6fbb3"
>
<Expression>Vrel</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="550"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ComputeReleaseSpeed"
 Guid="5c335c34-528e-46f4-9884-8c8b1fa9a7de"
>
<ReqRef
 Id="197c8e6f-0fae-4862-be76-b280ffa433d2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="74164700-6343-4bc1-ae27-240eb739a4bb"
>
</ReqRef><ReqRef
 Id="d2f07368-a40f-4418-bf3c-74e928e6bbcf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5ec9229d-097b-4bd6-a01f-036dd3c6658d"
>
</ReqRef><ReqRef
 Id="5b7d2c0d-92d5-4743-bbe3-847b2546e103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b61a63ed-85b8-4ce8-8c83-1a84d95f9f9d"
>
</ReqRef><Comment>Computes the value of the release speed for all the EBI targets situated between d_tripEOA and the SvL.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="ccedf329-af56-4de8-8836-753af71472df"
>
<Expression>REDUCE
    TargetsList() |
        d_tripEOA() &lt;= X.Location AND X.Location &lt; MA.SvL().Location
USING X IN
    BaseTypes.MinSpeed ( X1 =&gt; ComputeReleaseSpeedForTarget ( X ), X2 =&gt; RESULT )
INITIAL_VALUE
    Default.BaseTypes.Speed.Infinity</Expression>
</Case></Cases>
</Function><Function
 Type="Double"
 Default=""
 X="550"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="alpha"
 Guid="ab304d57-256e-480e-8d90-505ce5106fcc"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b5e8acbc-7c6e-4ae8-ba53-d7265c68eba7"
>
</ReqRef><Comment>Represents the alpha value used to compute d_tripEOA.</Comment>
<Cases>
<Case
 Name="Level 1"
 Guid="d5391f76-d062-492e-affe-4c04089ed853"
>
<PreConditions>
<PreCondition
 Guid="6987e771-1b6a-40d7-86d1-6ee0972c1e4a"
>Level.Value.Value == Default.Level.L1</PreCondition></PreConditions>
<Expression>1.0</Expression>
</Case><Case
 Name="Level 2 or 3"
 Guid="010ca8b3-2925-48af-97de-65c54cff6b6a"
>
<PreConditions>
<PreCondition
 Guid="c2818a11-3cd6-4d37-9f07-66a869d1737c"
>Level.Value.Value in [Default.Level.L2, Default.Level.L3]</PreCondition></PreConditions>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="330"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ComputeStartRSM_otherTargets"
 Guid="68f6cdc7-8f06-48b1-87fd-3ab1ef04f1eb"
>
<ReqRef
 Id="a387bd06-4306-436c-ae73-a3faa509f059"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8c6322e8-c5f6-4743-88de-89dede07dffb"
>
</ReqRef><Comment>Gets the minimum SBI distance for targets between the EOA trip location and the SvL, if any</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Speed"
 Name="Vrelease"
 Guid="462352d6-884e-4837-bad4-401ec3bb14df"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="c5e16647-8fa2-4097-95d2-bf283c6febd5"
>
<Comment>We use TARGETS here instead of the function TargetsList() because this calculation only applies to MRSP targets, not the EOA or the SvL.</Comment>
<Expression>REDUCE TARGETS(
    Targets1=&gt;MIN(
        First=&gt;MRSP.SpeedRestrictions,
        Second=&gt;NationalValues.MaxDistInSRSpeedRestriction),
    Targets2=&gt;EMPTY,
    Targets3=&gt;EMPTY
) | (X.Location &gt;= d_tripEOA() AND X.Location &lt;= MA.SvL().Location AND X.Speed &lt;= Vrelease)
  USING X IN BaseTypes.MinDistance(
          X1 =&gt; TargetSpeedMonitoring.d_SBI2(
                    Vest =&gt; Vrelease,
                    aTarget =&gt; X,
                    EstimatedAccelerationSetToZero =&gt; True
                    ),
          X2 =&gt; RESULT
        )
  INITIAL_VALUE Default.BaseTypes.Distance.Infinity</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="40"
 Y="110"
 Width="100"
 Height="50"
 NeedsRequirement="FALSE"
 Name="UpdateReleaseSpeed"
 Guid="202a2d5f-f479-43cf-a09f-f9e4ebb24dfd"
>
<Comment>This procedure computes the new value of the release speed and should be called when:
 - a new MA is received
 - the overlap is revoked
 - the condition of 3.13.9.4.8.2.1 is satisfied</Comment>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="UpdateReleaseSpeed"
 Guid="7ad0f6bc-36a7-4045-b3f3-10e5af9ba196"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Section time-out"
 Guid="fa35354e-1628-4379-9b8c-c233d2693a53"
>
<ReqRef
 Id="8298df3a-f507-437d-a5de-ceceaeedbead"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bff83381-1611-40fd-b540-265bc23d0e5a"
>
</ReqRef><ReqRef
 Id="6e298525-0025-4c39-8c09-9a58a38729be"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="56dc620c-2461-49cb-b42c-3fc81f6723c3"
>
</ReqRef><Comment>If a section timer expires, the release speed returns to its default value</Comment>
<PreConditions>
<PreCondition
 Guid="08e60ccf-2d2d-47ca-b4e4-b9f4c1c12b59"
>Available(MA.MATimers.TimedOutSection())</PreCondition></PreConditions>
<Actions>
<Action
 Guid="8d371a70-ef2e-4e1b-8637-313df835dbd9"
>ReleaseSpeedMonitoring.ReleaseSpeed &lt;- 
ReleaseSpeedMonitoring.ReleaseSpeedValue(
    Vrel=&gt;Default.BaseTypes.Speed.UseNV
)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Overlap"
 Guid="7757420e-906d-4475-b82f-d0b746202528"
>
<ReqRef
 Id="197c8e6f-0fae-4862-be76-b280ffa433d2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9e3af27e-b1cf-464f-8a4f-196cbcaa6c30"
>
</ReqRef><Comment>If the end section of the MA contains an overlap, this sets the release speed.</Comment>
<PreConditions>
<PreCondition
 Guid="63ee2938-1c1a-4777-96a9-abd7cce122a7"
>Available ( MA.MA )</PreCondition><PreCondition
 Guid="5104ac8b-6652-4a39-aa1c-04a024112f3c"
>Kernel.MA.MA.EndSection.Overlap != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="bdeef7f9-b1e9-4712-8e10-b086f369f67d"
>ReleaseSpeedMonitoring.ReleaseSpeed &lt;- ReleaseSpeedMonitoring.ReleaseSpeedValue ( MA.MA.EndSection.Overlap.ReleaseSpeed )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="DangerPoint"
 Guid="6916e6e7-5d98-480a-b5ab-b8c43e431180"
>
<ReqRef
 Id="197c8e6f-0fae-4862-be76-b280ffa433d2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="99a6a6a4-7152-4be6-bb61-cc713c5f4e25"
>
</ReqRef><Comment>If the end section of the MA contains a danger point (and no overlap) this sets the release speed.</Comment>
<PreConditions>
<PreCondition
 Guid="2dfb6bca-97de-4a27-9a24-87ed725e3a3f"
>Available ( MA.MA )</PreCondition><PreCondition
 Guid="09c83eb2-8447-4577-b46e-0613ffc3a94e"
>Kernel.MA.MA.EndSection.DangerPoint != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b92f4e34-c91d-4c82-ab5a-8de9b327c19f"
>ReleaseSpeedMonitoring.ReleaseSpeed &lt;- ReleaseSpeedMonitoring.ReleaseSpeedValue ( MA.MA.EndSection.DangerPoint.ReleaseSpeed )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="NoReleaseSpeed"
 Guid="f2a39dc4-3923-4430-b016-a9bec3c4cdc6"
>
<ReqRef
 Id="478a5f6d-b653-4cda-931d-e01ddaac2803"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0d08daad-f311-4e77-bc96-cf7846bb4322"
>
</ReqRef><Comment>If nothing defines a release speed, its default value is 0.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="372aa3b8-cfb2-47c7-a29e-99cc9f9d0cd3"
>ReleaseSpeedMonitoring.ReleaseSpeed &lt;- 0.0</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="Default.BaseTypes.Speed"
 DefaultValue="1.0"
 VariableMode="Constant"
 X="80"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="epsilon"
 Guid="7ee43394-cda2-4bdc-9734-596ab6be0939"
>
<ReqRef
 Id="14bf6840-9762-4d5e-9a4c-58c8aad11768"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a88c99e5-6c3f-429e-81ac-759edeb5fbc9"
>
</ReqRef><Comment>Used for stabilization of release speed computation.</Comment>
</Variable><Variable
 Type="Default.BaseTypes.Speed"
 DefaultValue="0.0"
 VariableMode="Internal"
 X="190"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ReleaseSpeed"
 Guid="ce3bea7d-e5a8-4ccb-bbb9-db9e603d9294"
>
<ReqRef
 Id="ee7b5ecc-20f6-480c-aa0a-7836d5308d32"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="51c24a49-b799-4bac-b9d8-364331d8fbab"
>
</ReqRef><ReqRef
 Id="6112d3b2-46f0-4ecb-8029-415b38396a4d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b76a1f8d-eee1-410d-bc86-0a3fe02ac997"
>
</ReqRef></Variable></Variables>
</NameSpace>
