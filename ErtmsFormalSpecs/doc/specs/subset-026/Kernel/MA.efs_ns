<NameSpace
 X="160"
 Y="720"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Name="MA"
 Guid="0f25952e-aa3a-4ee6-ba2c-ecc98c278777"
>
<NameSpaces>
<NameSpaceRef
 Name="ModeProfile"
 Guid="78bbf16d-77a9-451f-865c-7232182d21ec"
>
</NameSpaceRef><NameSpaceRef
 Name="MARequest"
 Guid="8e966d15-e7c8-49df-8142-00a09f0d069f"
>
</NameSpaceRef><NameSpaceRef
 Name="MATimers"
 Guid="6c9779cd-cf72-4597-9dc0-b775886c5fe4"
>
</NameSpaceRef></NameSpaces>
<Structures>
<Structure
 Default=""
 X="320"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Verified="TRUE"
 Name="MAStruct"
 Guid="8df498d0-3616-49da-b2a7-9db1bea7f1c8"
>
<ReqRef
 Id="65a9a63b-024f-499e-9066-6149846269f5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="edccd2bb-fec6-4b8b-af7e-2e71e682514e"
>
</ReqRef><ReqRef
 Id="cc872c83-b7ef-45da-b511-6237904b6423"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="494999d8-ee8d-4548-a437-2a387cf0550c"
>
</ReqRef><ReqRef
 Id="9396972e-8fb4-49d1-9c8f-e2cd2efb6005"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ad55e9eb-97d0-4c95-b79d-f134ce82a0f3"
>
<Comment>EOA is computed based on the sections defined in the MA (see function EOA)</Comment>
</ReqRef><ReqRef
 Id="82d5bd61-4bef-4cfb-a68a-312446d79df1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f86c00f8-e1e7-4ec3-9d8a-502524b6b533"
>
</ReqRef><ReqRef
 Id="e63ca8af-18f8-432f-9c22-f989952a9561"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a3a19dfd-675a-47a7-a05e-124f6fa87627"
>
</ReqRef><ReqRef
 Id="588756eb-1786-4776-86ae-3aaa296881a9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a1ef48ef-ea46-416a-8690-ce4920df0402"
>
</ReqRef><Comment>Represents the Movement Authority of the train</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TargetSpeed"
 Guid="822a4190-32bb-49a2-b2a4-791f898eb763"
>
<ReqRef
 Id="9d444c1e-f8ce-44ed-adb0-f81c08abac75"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="936c8093-d42f-4ff8-b183-3dfae95ad59c"
>
<Comment>In this model, there is no distinction between EOA and LOA</Comment>
</ReqRef><ReqRef
 Id="03cd0321-724a-4dbf-ae18-99839cda8019"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9461219e-bdcd-4ea7-abd7-6d6994d58c3d"
>
</ReqRef><ReqRef
 Id="6daa6231-e601-4f4d-80cc-590024cf24ec"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fa9e005e-d4c8-4e08-80cc-1e312307064d"
>
</ReqRef><Comment>The target speed represents the permitted speed at the EOA.</Comment>
</StructureElement><StructureElement
 TypeName="SectionsCol"
 Default="[]"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Sections"
 Guid="92fb792b-224a-4e77-9363-39a46ceb3b79"
>
<ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c3c67ee5-da42-41e7-9c2c-518d605f7070"
>
</ReqRef><ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e44cc5f0-6ddb-44ee-b37d-f60aed1ee7cd"
>
</ReqRef><Comment>Represents the sections of the MA.</Comment>
</StructureElement><StructureElement
 TypeName="EndSection"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="EndSection"
 Guid="13876bf8-6e84-4ade-bd66-f668c1e7ed94"
>
<ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="37902c55-a2aa-4782-b696-10ee844af696"
>
</ReqRef><ReqRef
 Id="21d0760f-a057-466a-bdf0-41f316e4721c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="075e3863-3e3e-4ccc-86eb-cefe3ffa1bb5"
>
</ReqRef><Comment>Represents the end section of this MA.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Time"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TargetSpeedTimeOut"
 Guid="c05d7ceb-20bd-46df-9df9-9b923de8dce9"
>
<ReqRef
 Id="9d444c1e-f8ce-44ed-adb0-f81c08abac75"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f533b353-d451-400a-8dd2-5abae051378a"
>
</ReqRef><ReqRef
 Id="a774525d-0597-4d00-a2f5-3148dcf359bd"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8e1ccf55-ac6f-46d9-ba7d-2d3cf8103f1c"
>
</ReqRef><Comment>The time-out associated to the target speed, if any.</Comment>
</StructureElement></Structure><Structure
 Default=""
 X="620"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Section"
 Guid="fffdbc4e-3bd3-4ff3-ba88-a499ce5b40d6"
>
<ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b1888cc3-7271-4b48-8cf3-c0ab4691b97c"
>
</ReqRef><ReqRef
 Id="588756eb-1786-4776-86ae-3aaa296881a9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0ee8d9ee-0bc0-46fb-b113-c217a901a62b"
>
</ReqRef><Comment>Represents a MA section.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Length"
 Guid="17b8c47c-897c-4c86-bad5-6d9d3c50dd67"
>
<ReqRef
 Id="51578cd7-a50a-46d9-b7a5-11e24eee2f49"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6737cb2a-9630-4310-92ba-f52c7707c53b"
>
</ReqRef><ReqRef
 Id="71df462f-9b71-4b35-add6-5ded11f964a3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a20c83c9-e060-4208-b74b-aee42677a287"
>
</ReqRef><Comment>Represents the length of the section.</Comment>
</StructureElement><StructureElement
 TypeName="MATimers.TimeOut"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TimeOut"
 Guid="da427778-9690-4159-86b8-cdbd5be509f4"
>
<ReqRef
 Id="9e1096f7-cf79-4ff5-8dcf-ac3a8bc775e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c605f2f6-86b5-44ec-a3c4-eb16909386b1"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a2fad3a3-4f2a-487c-8ef9-7c3481580796"
>
</ReqRef><ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1e622c10-4067-4b8c-8fdb-bd1ae56d4333"
>
</ReqRef><ReqRef
 Id="e5896680-5ea9-4749-b01e-599ab85abe84"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b53bfa83-8ecd-4edf-9de1-ff2c5b5a30b1"
>
</ReqRef><Comment>Represents the section time-out (if no time-out is available for this section, this field is EMPTY).</Comment>
</StructureElement></Structure><Structure
 Default=""
 X="320"
 Y="470"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="EndSection"
 Guid="a413947b-e66e-4566-b7e6-c0cf63e5a079"
>
<ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4970a73a-1da7-4bc8-954f-4925e2d13724"
>
</ReqRef><ReqRef
 Id="21d0760f-a057-466a-bdf0-41f316e4721c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="be8d438c-ce95-492f-bddb-997f4f6ae273"
>
</ReqRef><ReqRef
 Id="588756eb-1786-4776-86ae-3aaa296881a9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="94c96f01-8bbd-48d9-84d8-c56c227e7ca7"
>
</ReqRef><Comment>Stores all the information relative to the final section of the MA</Comment>
<StructureElement
 TypeName="MATimers.TimeOut"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="EndSectionTimeOut"
 Guid="2d6af58d-dd8c-472d-9572-ab7f1a8b21f2"
>
<ReqRef
 Id="5fa277c4-02a9-47ea-b645-f1473c0617ae"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="abb3e391-8159-4201-b085-365fa15f7ebf"
>
</ReqRef><ReqRef
 Id="8d09ca53-1394-4843-b8d6-829a86336ca3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d4a0928c-20e3-4ff0-a01e-6332c2d4cc8c"
>
</ReqRef><ReqRef
 Id="86b0e1e8-53c9-4a9f-9b60-1863f04939ec"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="60c65f97-9c1a-4bca-9c17-a18e2afa8ba1"
>
</ReqRef><Comment>Represents the end section time-out, if any.</Comment>
</StructureElement><StructureElement
 TypeName="MATimers.TimeOut"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TimeOut"
 Guid="1911d076-bc2c-473f-9996-4e294ed0d76d"
>
<ReqRef
 Id="9e1096f7-cf79-4ff5-8dcf-ac3a8bc775e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="670dacf7-9a0f-41f4-bb25-aca2fcc8be16"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a0e9d1d7-6924-4bc3-bf87-18ef32c2e0d2"
>
</ReqRef><ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="68d25881-5473-4b53-9edf-050bf2a2dd85"
>
</ReqRef><Comment>Represents the section time-out (if no time-out is available for this section, this field is EMPTY).</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Length"
 Guid="8b7644b8-6eb4-414e-b86d-2135de4bd99c"
>
<ReqRef
 Id="51578cd7-a50a-46d9-b7a5-11e24eee2f49"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="06ba7762-c23f-43dc-a182-64df5305b09a"
>
</ReqRef><ReqRef
 Id="6429b85c-2e6f-4225-8997-9701a98eacd4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0dfd4ad6-88af-4b29-b13a-777ffc75a9c4"
>
</ReqRef><Comment>Represents the length of the section.</Comment>
</StructureElement><StructureElement
 TypeName="DangerPoint"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="DangerPoint"
 Guid="8214d334-19c9-42f7-92ef-8fdd2829cd53"
>
<ReqRef
 Id="48fba67a-8f19-4715-92e7-aea531d01881"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="44ac511f-732d-4ab6-ab87-44e92ca647ec"
>
</ReqRef><ReqRef
 Id="53a5391c-db43-4e26-95c4-26b8316d77a8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="92727fe6-13d6-4976-b57c-f69074594a97"
>
</ReqRef><ReqRef
 Id="30dda18a-b11e-4bbe-a761-8fe4113de2e5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4c0ab255-bf75-406b-9d3b-cec018d96ba1"
>
</ReqRef><Comment>Represents a location beyond the EOA that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
</StructureElement><StructureElement
 TypeName="Overlap"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Overlap"
 Guid="b93ed011-6182-442b-9c6b-dd405f79deca"
>
<ReqRef
 Id="7fa6af9c-023d-474c-a0f7-8f72181a8fee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0b9c990f-17d1-4914-b45b-f667d4516013"
>
</ReqRef><ReqRef
 Id="4777cb40-cb40-4257-8324-c515327a0152"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="593f76fa-7c77-452d-8a35-f3f01e98fd7c"
>
</ReqRef><ReqRef
 Id="b3845192-4c2b-4425-bdb0-c0a568c940ea"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8fd8e6bd-205b-443d-bf8a-7c515f2b4eb5"
>
</ReqRef><Comment>Location beyond the danger point that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
</StructureElement></Structure><Structure
 Default=""
 X="250"
 Y="560"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Verified="TRUE"
 Name="DangerPoint"
 Guid="769a9d35-b852-451f-a569-4d9c8e6ff3d9"
>
<ReqRef
 Id="48fba67a-8f19-4715-92e7-aea531d01881"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6372cfb5-dba2-43a0-9bd4-7a375e65418e"
>
</ReqRef><ReqRef
 Id="53a5391c-db43-4e26-95c4-26b8316d77a8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="64ea2a16-2ff6-47bf-acf1-4452a25fc488"
>
</ReqRef><ReqRef
 Id="e249c65e-2618-4df7-b69d-97ced56922b4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c4b96bb7-b6dd-474c-8282-3b44de5d9671"
>
</ReqRef><Comment>Represents a location beyond the EOA that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
 Guid="037019d6-7d4f-4201-9d91-84e885bb225d"
>
<ReqRef
 Id="1b773b1d-8ba0-43bd-abfb-9c45b0550e35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5ee7bd93-0843-4f60-a536-299f7068ad93"
>
</ReqRef><Comment>The distance from end of section to danger point.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default="0.0"
 Mode="Internal"
 Implemented="TRUE"
 Name="ReleaseSpeed"
 Guid="86e7d570-5ee4-450f-b475-3470ed1c4d28"
>
<ReqRef
 Id="197c8e6f-0fae-4862-be76-b280ffa433d2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="02e23ce3-b9ae-4687-aaa5-d9b7e2414b1b"
>
</ReqRef><ReqRef
 Id="530b6e5d-9ed2-460a-bc4f-9e158ad1c0b1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6e15efee-d79e-446d-a699-f267fb43432a"
>
</ReqRef><Comment>The release speed related to danger point.</Comment>
</StructureElement></Structure><Structure
 Default=""
 X="400"
 Y="560"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Overlap"
 Guid="0daae925-12c0-4d85-ad1f-543941dfde02"
>
<ReqRef
 Id="4777cb40-cb40-4257-8324-c515327a0152"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ae6a370c-ae34-4c44-a20a-156f8789c67b"
>
</ReqRef><ReqRef
 Id="7fa6af9c-023d-474c-a0f7-8f72181a8fee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bed6ba69-5c91-40a8-b855-f2ac195753de"
>
</ReqRef><ReqRef
 Id="e249c65e-2618-4df7-b69d-97ced56922b4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8371dc40-5fdc-4c5a-a7e0-6af1acea5609"
>
</ReqRef><Comment>Location beyond the danger point that can be reached by the front end of the train without a risk for a hazardous situation.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Distance"
 Guid="ba3f3265-6ed5-47e3-870b-0a76162d91c2"
>
<ReqRef
 Id="326cbd94-a19c-4b09-941b-6c0795e922f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="967dc399-906e-4a55-817c-7e89c5e11817"
>
</ReqRef><Comment>Distance from end of section to end of overlap.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TimerDistance"
 Guid="5373acc3-c181-4bd3-b641-c8aa2842b202"
>
<ReqRef
 Id="747d021b-8bdf-43c7-8a0a-a3f568408c72"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5a80fd84-6231-4552-ad65-5ca0b9aef662"
>
</ReqRef><Comment>Distance from Overlap timer start location to end of section.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Speed"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="ReleaseSpeed"
 Guid="082a1005-689c-489c-8133-2ca4736259ca"
>
<ReqRef
 Id="197c8e6f-0fae-4862-be76-b280ffa433d2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ac3a9c7a-2e66-4990-89ae-238783bef032"
>
</ReqRef><ReqRef
 Id="887d1614-89c2-401e-8b28-d47db2b19981"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8cd1e4d4-3257-43a2-b1fd-a3b33feb115b"
>
</ReqRef><Comment>Release speed related to overlap.</Comment>
</StructureElement><StructureElement
 TypeName="Default.BaseTypes.Time"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TimeOut"
 Guid="e1712786-7eb6-4d7b-a62b-309d3747846c"
>
<ReqRef
 Id="1a00d073-a908-4fc4-9ec3-4652a955b351"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8926012b-cb08-4444-82d5-ddd1b4a6dea6"
>
</ReqRef><Comment>The validity time of the overlap.</Comment>
</StructureElement></Structure><Structure
 Default=""
 X="200"
 Y="650"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="MaShorteningHandler"
 Guid="cb017d60-1896-46d2-84be-837577197514"
>
<ReqRef
 Id="d8e470e4-30ad-41be-8c8d-9828fc218d73"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b92e3a7f-2314-423a-b172-57a7387edfe4"
>
</ReqRef><ReqRef
 Id="0c39084a-19e8-4784-962f-8dd4ba8a2aee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="67c5844c-2587-487e-a1a0-437d5be4dbf5"
>
</ReqRef><Comment>Used to store the information about the previous MA, when a new MA is received. Allows to verify if the MA was shortened.

IsSvL indicates if the previous End of Movement Authority was an SvL (to detect the case of MA shortening regardless of the SvL Location).

Location stores the previous End of Movement Authority location.</Comment>
<StructureElement
 TypeName="Default.BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Location"
 Guid="3b031a74-bd3f-4780-957d-90c57a29cfbe"
>
<Comment>The location of the previous SvL (is &quot;Unknown&quot; if there was none)</Comment>
</StructureElement><StructureElement
 TypeName="Boolean"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="IsSvL"
 Guid="18c808fe-83c5-4bd0-86bd-a48d90be00d7"
>
<Comment>Records whether the previous MA was supervising a SvL or has a LOA</Comment>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="Kernel.MA.Section"
 MaxSize="6"
 Default="[]"
 X="480"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Verified="TRUE"
 Name="SectionsCol"
 Guid="03331e1a-0a7c-414b-bdf9-0041a6d8266a"
>
<ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1b0b3079-d9ec-4f0f-b72e-9eca770ecca6"
>
</ReqRef><ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c9a9ed6c-a891-4b6d-9319-51c519b13d14"
>
</ReqRef><ReqRef
 Id="d701e3bf-8b71-4b6f-84c0-9b64aa641498"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="14420dcd-645e-4886-9f63-380fed6e3f3d"
>
</ReqRef><Comment>Represents MA sections.</Comment>
</Collection><Collection
 TypeName="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Default="[EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]"
 X="170"
 Y="470"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TargetsCol"
 Guid="12ba0846-ca7e-4950-af35-aafe85e10270"
>
<Comment>This collection is used to keep the EOAs and SvLs from different sources so that the most restrictive one can be accessed</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Default=""
 X="30"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Verified="TRUE"
 Name="ClosestEOA"
 Guid="5a294ee6-8877-47bf-a4eb-c4de4cd6ab32"
>
<ReqRef
 Id="e0b44a69-1080-47e9-80b7-b635996f4239"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8c39bc7c-c2d4-4499-a362-8ee8e21088ff"
>
</ReqRef><ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e5a38aa4-31ff-4e40-af69-8dcfb5a93777"
>
</ReqRef><ReqRef
 Id="9a2c09f8-7df9-4251-9530-ae098d435bc9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="10ede9e4-375a-4365-abe2-48b4cd5bbd59"
>
</ReqRef><ReqRef
 Id="81828a4c-73e2-440d-8353-e050603f323f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="afebc8b3-dc1c-46e1-9ff4-5bb175c491a9"
>
</ReqRef><ReqRef
 Id="6b1f5744-6c85-45eb-a7de-1eba5bad0131"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f548f182-00ad-499e-8840-eb9b3ea723d0"
>
</ReqRef><ReqRef
 Id="f2ddac1e-eea7-4f30-ade6-5ace543c21ae"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="00f7a85e-236e-4aa7-9eb5-9b959e376ed9"
>
</ReqRef><ReqRef
 Id="f7dd0ecc-078c-4434-8d46-4ebb4b1f44f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="32cf65cc-d986-4f33-b2ec-0ac0ec4f71bf"
>
</ReqRef><ReqRef
 Id="beedf65d-aba6-4017-83dd-0fe57bc88e85"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="dfb1ba4b-b324-4e7f-832b-24466ee392e1"
>
</ReqRef><ReqRef
 Id="5fd9abb2-0712-4c70-a573-7668ecb3a103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c4a0368d-a5f1-480b-9340-9e047f9781f2"
>
</ReqRef><ReqRef
 Id="f27f67c3-6ff7-425e-8ab3-f3eb40f14326"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="70b19684-f388-4c67-be54-9b1ac8c7ba6e"
>
</ReqRef><Comment>Gives the target corresponding to the End (or Limit) Of Authority. This is chosen to be the closest target in the EOAs collection</Comment>
<Cases>
<Case
 Name="Returns the closest EOA"
 Guid="4c10b760-6b33-42af-8b63-16dfab10d6b2"
>
<Expression>REDUCE EOAs
    USING X IN ClosestTarget(
    Target1=&gt;X,
    Target2=&gt;RESULT
)
INITIAL_VALUE CreateTarget (
    aSpeed =&gt; 0.0,
    aLocation =&gt; Default.BaseTypes.Distance.Infinity,
    aLength =&gt; Default.BaseTypes.Length.Infinity
 )</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.MA.Section"
 Default=""
 X="140"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateEFSSection"
 Guid="299a27b9-4a71-4ca2-927d-54c7d5add5cb"
>
<ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e45e8dfb-9ad8-409f-98e0-ea16f9988c29"
>
</ReqRef><ReqRef
 Id="b796c06e-efd9-4a35-abfc-9983a477fc35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e6ea834f-b78a-4b78-af3f-ca1a5b14c897"
>
</ReqRef><ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="21b9673d-f4b0-4482-b6d3-c5dff9e92190"
>
</ReqRef><ReqRef
 Id="51578cd7-a50a-46d9-b7a5-11e24eee2f49"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5094fa34-a6ce-437b-9aa9-f45c6cf4929c"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4465041e-c387-4430-b633-0c0e741b65ee"
>
</ReqRef><ReqRef
 Id="e5896680-5ea9-4749-b01e-599ab85abe84"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5349344c-4d0b-4ca3-b3f0-ef2b7d3a431b"
>
</ReqRef><Comment>Creates an EFSSection from a section received from a balise of RBC (level 1).</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="ERTMSSection"
 Guid="41c9e67f-0142-4f8c-bbc7-8380bc60d9fd"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
 Guid="0b75831b-6fa2-4e98-80b8-0b78d1295f41"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="7c9adcc0-43e2-4367-9d2a-cb2ce7306602"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="TimeOutAvailable"
 Guid="361186d3-3c58-453f-be53-aea46fd7bbe8"
>
<PreConditions>
<PreCondition
 Guid="0a772204-e922-463b-8a9a-6a03d5ca620b"
>ERTMSSection.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.Section_Timer_information_to_follow</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; MessageTypes.QScaleLength ( length =&gt; ERTMSSection.L_SECTION, scale =&gt; Scale),
    TimeOut =&gt;Kernel.MA.MATimers.TimeOut
    {
        Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; ERTMSSection.D_SECTIONTIMERSTOPLOC, scale =&gt; Scale ),
        TimeOut =&gt; BaseTypes.Time ( ERTMSSection.T_SECTIONTIMER ),
        TimerStart =&gt; SectionStartTimer
    }
}</Expression>
</Case><Case
 Name="NoTimeOut"
 Guid="717562e7-6133-4872-9010-77e3897ea6a1"
>
<PreConditions>
<PreCondition
 Guid="8fdfbf3a-d43f-4049-9248-8a65ef1a013f"
>ERTMSSection.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.No_Section_Timer_information</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; MessageTypes.QScaleLength ( length =&gt; ERTMSSection.L_SECTION, scale =&gt; Scale),
    TimeOut =&gt; EMPTY
}</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Default=""
 X="250"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ConvertSectionLvl2or3_to_SectionLvl1"
 Guid="ceb5e609-8c37-4294-9586-4a69e0070fc4"
>
<ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e555afdc-c196-4df7-b252-268c0e464fa1"
>
</ReqRef><ReqRef
 Id="b796c06e-efd9-4a35-abfc-9983a477fc35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3cc6d5df-2fd0-42b7-8f0d-ad1b2ff9cf85"
>
</ReqRef><Comment>Creates an EFSSection from a section received from a balise of RBC (level 1).</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.SubStructure1"
 Name="SectionLvl2or3"
 Guid="4d27be20-b76b-44c0-818f-80dd2b0de1dd"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="636795e1-325d-4997-9856-6e67e4d53efe"
>
<Expression>Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1
{
    L_SECTION =&gt; SectionLvl2or3.L_SECTION,
    Q_SECTIONTIMER =&gt; SectionLvl2or3.Q_SECTIONTIMER,
    T_SECTIONTIMER =&gt; SectionLvl2or3.T_SECTIONTIMER,
    D_SECTIONTIMERSTOPLOC =&gt; SectionLvl2or3.D_SECTIONTIMERSTOPLOC
}</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Default=""
 X="30"
 Y="70"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Verified="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointLocation"
 Guid="6b92f0de-4a87-4291-a6a9-248f1326e7e9"
>
<Comment>Returns the Danger Point location, if any, in the new MA</Comment>
<Cases>
<Case
 Name="Danger Point available"
 Guid="f169e84e-11ae-4f9f-b851-937f23e52430"
>
<PreConditions>
<PreCondition
 Guid="7efeaf2c-b67d-4232-90aa-091ac69f21f2"
>Available ( MA.EndSection.DangerPoint )</PreCondition></PreConditions>
<Expression>EndOfMA() + MA.EndSection.DangerPoint.Distance</Expression>
</Case><Case
 Name="Danger point not available"
 Guid="c4d696f2-00fb-44bb-9e6e-1eeef034a072"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Default=""
 X="140"
 Y="70"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Verified="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapLocation"
 Guid="c6b10ea9-e38f-4c8c-87dc-39e218ace10c"
>
<Comment>Returns the Overlap location, if any, in the new MA</Comment>
<Cases>
<Case
 Name="Overlap available"
 Guid="3bf53b41-9418-4a5c-957b-ab7c691f9f16"
>
<PreConditions>
<PreCondition
 Guid="925708df-b37c-401d-8a24-1a988c5dd27b"
>Available ( MA.EndSection.Overlap )</PreCondition></PreConditions>
<Expression>EndOfMA() + MA.EndSection.Overlap.Distance</Expression>
</Case><Case
 Name="Overlap not available"
 Guid="f11f62bb-41ff-4755-a94f-be95cf5beea9"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Default=""
 X="250"
 Y="70"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CurrentSectionLength"
 Guid="ec9777c9-b927-4f35-98c8-6a59a224aac8"
>
<Comment>Returns the length of the current section (used for distance relocation when a new LRBG is passed).</Comment>
<Cases>
<Case
 Name="SectionsAvailable"
 Guid="6a293889-6aa0-41bb-8efa-980636513f25"
>
<PreConditions>
<PreCondition
 Guid="fbfb8590-c1b3-499f-ac7e-0ee3010e3001"
>Available ( MA )</PreCondition><PreCondition
 Guid="86774d2d-b0d2-450c-b5b2-18a8e71de39b"
>MA.Sections != EMPTY</PreCondition></PreConditions>
<Expression>(FIRST X IN MA.Sections).Length</Expression>
</Case><Case
 Name="EndSection"
 Guid="ad46e6ec-360a-48b9-8b2e-93d340f6a5c5"
>
<PreConditions>
<PreCondition
 Guid="e87e2f4b-7885-494e-9e6c-2a02d454fea0"
>Available ( MA )</PreCondition></PreConditions>
<Expression>MA.EndSection.Length</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="30"
 Y="130"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="SignallingRelatedSpeedRestrictions"
 Guid="d6a64001-c3fe-44e8-9434-132f86949851"
>
<ReqRef
 Id="d949102e-f89b-489f-8acc-cf60824bd0e5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="24bbf4ac-19d9-4c24-bd69-862fdf5fbfc0"
>
</ReqRef><ReqRef
 Id="bfa09769-fb03-456f-b92b-14ab4cf7977b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b30f9b7b-ec01-49f6-b5b0-99817d4717a1"
>
</ReqRef><ReqRef
 Id="b2a3ff3a-3f41-4dde-9bf8-ee649ce14d86"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bd5f0b6c-32b6-40d1-ac01-9aff2971e8a6"
>
</ReqRef><ReqRef
 Id="40e65850-da07-4c7a-bd9f-43c30f8a20a5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d81c479c-4f78-4832-95cd-b273f3c38560"
>
</ReqRef><Comment>Provides the speed profile due to signalling related speed restrictions. Only applicable for level 1.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="d"
 Guid="819fd0de-4226-49f5-91e0-88d9da2f6949"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Level 1"
 Guid="2e6b1009-f980-487a-849d-ebb6b37ddf03"
>
<PreConditions>
<PreCondition
 Guid="882879c9-2057-45f9-afa8-3b11d5abd62a"
>Kernel.Level.Value.Value == Level.L1</PreCondition></PreConditions>
<Expression>SignallingRelatedSpeedRestriction</Expression>
</Case><Case
 Name="Otherwise"
 Guid="b5339113-60a7-4cec-9e60-c156ca255ef5"
>
<Expression>Default.BaseTypes.Speed.MaxSpeed</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="140"
 Y="130"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="EOASpeedRestriction"
 Guid="74fa2842-40d4-4d71-8890-4cdb2e72bb65"
>
<ReqRef
 Id="7525f72a-3b46-498c-8c48-1ed3ad888b1a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4db6d01a-bc43-44a3-8dce-1e2bd9a334a6"
>
</ReqRef><ReqRef
 Id="02854410-9ddb-4b94-993c-b26498a498bf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="68365ea2-8af2-4e3c-b3a5-34c2ae0acf1d"
>
</ReqRef><ReqRef
 Id="50a11b55-dc19-4427-b0fd-d81384417f79"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="272fbe21-0828-499d-8812-c8e59a9e1cf8"
>
</ReqRef><ReqRef
 Id="cb22befd-4969-4fdf-9f68-f6b39ec1abe3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a009b90-46f1-4fd5-a3fb-0c1c2a4a544b"
>
</ReqRef><ReqRef
 Id="5e616edd-93b3-48b1-9e3c-e0c863f4a609"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a9303a2-b13b-4eaf-a4bb-222cc6935a64"
>
</ReqRef><ReqRef
 Id="3db576cb-65c4-4a7c-b6a3-7092c89448db"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff8de06c-a0b6-41aa-a1c0-e5c33282eb0e"
>
</ReqRef><Comment>Provides speed restriction for EOA (if applicable). Used to calculate the SBD curve.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="e97bed42-57ce-407d-94ec-bf6b10d74a88"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="EOA"
 Guid="7c9cf2ee-5868-4b21-85b0-08809d88d4a1"
>
<PreConditions>
<PreCondition
 Guid="0b34f057-a897-49ad-8c7c-70b508ae5178"
>Available ( MA )</PreCondition><PreCondition
 Guid="2217fe28-281b-4814-8139-79c47dc4b92c"
>MA.TargetSpeed == 0.0</PreCondition><PreCondition
 Guid="bdd0dd49-4e89-48c7-ac0a-a7fabcb2b107"
>Distance &lt; ClosestEOA().Location</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="Otherwise"
 Guid="1a14e0bc-fded-4f5f-932e-365d8fe7cf64"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Cacheable="TRUE"
 Default=""
 X="250"
 Y="130"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EOADefined"
 Guid="29c47ec9-970d-45a3-9828-ffd8555a56b6"
>
<Comment>Indicates if the end of movement autority is an EOA or a LOA.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="e8cfa57a-9d6e-4848-96dc-49781bb162b5"
>
<Expression>Available ( MA ) AND MA.TargetSpeed == 0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Cacheable="TRUE"
 Default=""
 X="30"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SpeedRestrictions"
 Guid="e2bd1235-36f0-49b6-aad4-b5149860a234"
>
<ReqRef
 Id="02854410-9ddb-4b94-993c-b26498a498bf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c9d89b39-4203-4dda-a11a-939c57050fae"
>
</ReqRef><ReqRef
 Id="50a11b55-dc19-4427-b0fd-d81384417f79"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="778e779f-ea18-4500-85c8-582d82fbed36"
>
</ReqRef><ReqRef
 Id="68cdb140-3c4e-4bdc-a122-88e2b2e22f7f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="94298eb1-0458-4526-ae4c-a02d03d1301d"
>
</ReqRef><ReqRef
 Id="ca1c598d-015e-44b0-9659-1a4c483f22b5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5c3e88d1-0c30-47b1-b54e-4f263dc99927"
>
</ReqRef><Comment>Returns the maximum speed permitted by the MA</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="cafdef69-776b-45aa-85cf-c27fd8208974"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No MA available"
 Guid="116fae04-3eb4-4678-9caa-e8684037bc76"
>
<PreConditions>
<PreCondition
 Guid="765c0674-3659-40da-b982-66fd686466df"
>MA == EMPTY</PreCondition></PreConditions>
<Expression>0.0</Expression>
</Case><Case
 Name="Before end of movement authority"
 Guid="0abfbd82-eaf8-4217-ba9d-7c277c70b2c5"
>
<PreConditions>
<PreCondition
 Guid="61aaf608-32c4-4026-a55c-a9828eaacc69"
>Distance &lt; ClosestEOA().Location</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case><Case
 Name="After LOA"
 Guid="4f751946-7630-41bb-847e-8d355511ed87"
>
<PreConditions>
<PreCondition
 Guid="22b40574-308e-4350-b8cc-9b21682fd64e"
>MA.TargetSpeed != 0.0</PreCondition><PreCondition
 Guid="788808e3-5b2d-4dcf-a6ba-96961f01f422"
>ClosestEOA().Location &lt;= Distance</PreCondition></PreConditions>
<Expression>MA.TargetSpeed</Expression>
</Case><Case
 Name="Otherwise"
 Guid="09116a4e-beda-460c-9d94-5cb177833416"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Default=""
 X="470"
 Y="130"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="CreateReleaseSpeed"
 Guid="ce1ae19d-f94e-447b-ab55-405ef7ed72a6"
>
<ReqRef
 Id="530b6e5d-9ed2-460a-bc4f-9e158ad1c0b1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="504a91b9-ef17-4281-8cc7-87c6fc58bb8f"
>
</ReqRef><ReqRef
 Id="646fea43-0ea3-400a-89a4-02268d193745"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d92acf09-fdc3-431e-892f-a7eba845a804"
>
</ReqRef><ReqRef
 Id="76f867cd-faea-4765-a0a3-22abe280a92c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bfba465f-04f7-44f3-9f64-9cb5a77cdf39"
>
</ReqRef><ReqRef
 Id="fd8ad766-e2af-4dec-8c00-61b7e5d9b49c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="215e2d91-c545-47d5-83ee-b9a859ca88f7"
>
</ReqRef><Comment>Gets the release speed from the MA packet</Comment>
<Parameters>
<Parameter
 Type="Default.MessageTypes.Speed"
 Name="Speed"
 Guid="405a9c49-28dd-4720-9656-e61045e6681f"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="ComputeOnBoard"
 Guid="d55c95f3-db74-4443-ad3c-7a5b9b0c7ea2"
>
<PreConditions>
<PreCondition
 Guid="e9c98b36-1925-434e-896b-fa4ce03dc5a0"
>Speed == 126</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.ComputeReleaseSpeedOnBoard</Expression>
</Case><Case
 Name="UseNationalValue"
 Guid="d9d1591d-d96e-4b2d-b480-6d89d9bb75d4"
>
<PreConditions>
<PreCondition
 Guid="a980e397-a795-40b4-b011-0c1cb04f1c00"
>Speed == 127</PreCondition></PreConditions>
<Expression>BaseTypes.Speed.UseNV</Expression>
</Case><Case
 Name="ReleaseSpeedValue"
 Guid="9b709fe8-17d7-413b-b63a-bf07d8f08c8c"
>
<Expression>MessageTypes.SpeedResolution ( Speed, 5.0 )</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Cacheable="TRUE"
 Default=""
 X="30"
 Y="190"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="IsSvL"
 Guid="9ea94bed-895b-412f-8fe7-07424bf7ce80"
>
<ReqRef
 Id="96719821-5827-4475-bf1c-8200e9c230e4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b504c750-6145-4740-82fc-56b392478824"
>
</ReqRef><Comment>Indicates if a target is a supervision limit.</Comment>
<Parameters>
<Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="aTarget"
 Guid="67dba448-4631-4b0f-8f87-40417ba9fde8"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="d5943e59-55e7-4a4d-85cc-f9ba7ae48a02"
>
<Expression>aTarget == SvL()</Expression>
</Case><Case
 Name="EOA"
 Guid="10f59b21-0503-4601-adc1-87c764ddfe9d"
>
<PreConditions>
<PreCondition
 Guid="e1e43fec-1bd9-430b-b9f2-f22b19ec4150"
>MA.EndSection.DangerPoint == EMPTY</PreCondition><PreCondition
 Guid="7a95d802-6408-440b-9b7a-9223467452cb"
>MA.EndSection.Overlap == EMPTY</PreCondition><PreCondition
 Guid="6381d018-885c-4985-b83c-b453a20ee559"
>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Location == ClosestEOA().Location AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="Danger point"
 Guid="d6d4cbe1-70bd-4bc9-a89c-9d45c55ff73e"
>
<PreConditions>
<PreCondition
 Guid="0cab5958-0cf8-4753-b8cd-d251eb116d58"
>MA.TargetSpeed == 0.0</PreCondition><PreCondition
 Guid="5f43d9e1-4b2b-4bd7-91c6-d47900a1c2a1"
>MA.EndSection.DangerPoint != EMPTY</PreCondition><PreCondition
 Guid="1ff6e623-15fe-4587-91b5-2df42c73f753"
>MA.EndSection.Overlap == EMPTY</PreCondition></PreConditions>
<Expression>aTarget.Location == DangerPointLocation() AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="Overlap"
 Guid="30fa9e2c-b484-4add-83d8-429d6c2c5608"
>
<PreConditions>
<PreCondition
 Guid="57131efa-61d8-458c-9dbb-e6b2791f8338"
>MA.EndSection.Overlap != EMPTY</PreCondition><PreCondition
 Guid="272584d5-9f9c-49ab-922e-579b2b33737f"
>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Location == OverlapLocation() AND aTarget.Speed == 0.0</Expression>
</Case><Case
 Name="No SvL defined"
 Guid="056f0d64-169b-43ef-91ed-958eba8bc866"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Cacheable="TRUE"
 Default=""
 X="140"
 Y="190"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="IsEOA"
 Guid="69cecb0a-ba7e-4b67-976e-e176498c9471"
>
<ReqRef
 Id="96719821-5827-4475-bf1c-8200e9c230e4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f208ef8f-9b2d-44f8-b208-f1db5ea2460c"
>
</ReqRef><Comment>Indicates if a target is an end of authority.</Comment>
<Parameters>
<Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="aTarget"
 Guid="4beac925-e434-459f-bfd5-6120b9bd9bdf"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="EOA defined"
 Guid="36ff1bc9-b2e8-40f8-9dba-2581da012de3"
>
<PreConditions>
<PreCondition
 Guid="a7bbbdad-720b-4304-9e62-657988c6fd3f"
>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Expression>aTarget.Speed == 0.0 AND aTarget.Location == ClosestEOA().Location</Expression>
</Case><Case
 Name="Otherwise"
 Guid="09357f4d-8e1d-4b43-8c43-65824ded4969"
>
<Expression>False</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Default=""
 X="360"
 Y="190"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SvL"
 Guid="fca588eb-ce86-4b0e-9bb9-3862a86d1b7d"
>
<ReqRef
 Id="5fd9abb2-0712-4c70-a573-7668ecb3a103"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fdedf1f9-8af6-4087-af89-97d0afc363b3"
>
</ReqRef><Comment>Gives the target corresponding to the Supervision Limit. This is chosen to be the closest target in the SvLs collection</Comment>
<Cases>
<Case
 Name="Return the closest SvL"
 Guid="c9018509-c2de-4033-826b-342a2bc196c4"
>
<PreConditions>
<PreCondition
 Guid="00ad348e-af27-4a5d-8965-b44d5241b2c0"
>SvLs != []</PreCondition></PreConditions>
<Expression>REDUCE SvLs
    USING X IN ClosestTarget(
    Target1=&gt;X,
    Target2=&gt;RESULT
)
INITIAL_VALUE CreateTarget (
    aSpeed =&gt; 0.0,
    aLocation =&gt; Default.BaseTypes.Distance.Infinity,
    aLength =&gt; Default.BaseTypes.Length.Infinity
 )</Expression>
</Case><Case
 Name="No SvL"
 Guid="4bdb7a4c-5966-440d-a6da-8633b54baea5"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.MA.Section"
 Default=""
 X="360"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="ConsiderSectionForInfill"
 Guid="77c23221-fd4d-40bd-9d27-49cf6601b20f"
>
<ReqRef
 Id="4f9e6037-be46-477d-bbca-3122bd9ad940"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a3d6b87-9808-4d95-8b3d-079d161344e9"
>
</ReqRef><Comment>This function decides if the current section shall be removed when an infill MA is received. There is three possible cases:
 - The section is situated before the infill location, in this case it is kept;
 - The section is situated after the infill location, in this case it is removed;
 - The infill location is situated on the section, in this case the section is cut at the infill location.</Comment>
<Parameters>
<Parameter
 Type="Kernel.MA.Section"
 Name="aSection"
 Guid="e46ae95a-41f4-40bf-80c2-08e5e7adde30"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="InfillDistance"
 Guid="69faeedf-b0c0-4785-b78e-2e58a659bdbe"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Section before infill distance"
 Guid="89ac38c6-ea08-42d4-870b-6bb755454e01"
>
<PreConditions>
<PreCondition
 Guid="446d8d87-a8ca-4443-a6b2-75786ca0a339"
>AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance ( aSection.Length ) &lt;= InfillDistance</PreCondition></PreConditions>
<Expression>aSection</Expression>
</Case><Case
 Name="Section on infill distance"
 Guid="5be63ab4-2fca-47ef-85d9-85cd1d3fd1f6"
>
<PreConditions>
<PreCondition
 Guid="2b237b9f-19a1-4300-b604-e5f799d23204"
>AbsoluteDistance ( aSection ) &lt; InfillDistance</PreCondition><PreCondition
 Guid="0b67ce90-36ac-48f6-a81a-77307bf2b355"
>InfillDistance &lt; AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance  ( aSection.Length )</PreCondition></PreConditions>
<Expression>Section
{
    Length =&gt; BaseTypes.LengthToDistance ( InfillDistance - AbsoluteDistance ( aSection ) ),
    TimeOut =&gt; aSection.TimeOut
}</Expression>
</Case><Case
 Name="Section after infill distance"
 Guid="293f2c22-0148-4f55-8ed2-5197a5afe514"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Length"
 Default=""
 X="360"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="AbsoluteDistance"
 Guid="9d38e360-bd00-4e60-a515-b33be10fff5f"
>
<ReqRef
 Id="4f9e6037-be46-477d-bbca-3122bd9ad940"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="18f755e4-1844-4280-8e91-1f496c122858"
>
</ReqRef><Comment>Provides the absolute distance (from the LRBG) to the beginning of the given section.</Comment>
<Parameters>
<Parameter
 Type="Kernel.MA.Section"
 Name="aSection"
 Guid="77265b1e-4cf7-4df7-a1d7-5d3621b225c0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="4f07055e-9131-4099-bcbf-9f8192604aeb"
>
<Expression>SUM
    MA.Sections |
        Before ( ExpectedFirst =&gt; X, ExpectedSecond =&gt; aSection, Collection =&gt; MA.Sections)
USING X IN
    Default.BaseTypes.LengthToDistance ( X.Length )</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Default=""
 X="360"
 Y="130"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ConvertMALvl2or3_to_MALvl1"
 Guid="047048de-91c5-4e60-9985-a11e4627ed1d"
>
<ReqRef
 Id="9f918f6f-f470-4613-ab97-374dc595ce7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="04d40134-05ca-4612-b046-7a683b13f916"
>
</ReqRef><ReqRef
 Id="e63ca8af-18f8-432f-9c22-f989952a9561"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a36361aa-5603-4d2c-9d48-20b02576001e"
>
</ReqRef><Comment>Converts a received level 2 or 3 MA into a level 1 MA so that they can all be handled by the same procedures</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.Message"
 Name="MALvl2or3"
 Guid="bb0632db-8fbf-403e-b539-c8f01d1e7de4"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="c83bf597-ce6b-4f10-ac08-cf2ed5729c4f"
>
<Expression>Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message
{
    NID_PACKET =&gt; MALvl2or3.NID_PACKET,
    Q_DIR =&gt; MALvl2or3.Q_DIR,
    L_PACKET =&gt; MALvl2or3.L_PACKET,
    Q_SCALE =&gt; MALvl2or3.Q_SCALE,
    V_MAIN =&gt; 0,
    V_LOA =&gt; MALvl2or3.V_LOA,
    T_LOA =&gt; MALvl2or3.T_LOA,
    N_ITER =&gt; MALvl2or3.N_ITER,
    Sequence1 =&gt; MAP MALvl2or3.Sequence1 USING X IN ConvertSectionLvl2or3_to_SectionLvl1 ( X ),
    L_ENDSECTION =&gt; MALvl2or3.L_ENDSECTION,
    Q_SECTIONTIMER =&gt; MALvl2or3.Q_SECTIONTIMER,
    T_SECTIONTIMER =&gt; MALvl2or3.T_SECTIONTIMER,
    D_SECTIONTIMERSTOPLOC =&gt; MALvl2or3.D_SECTIONTIMERSTOPLOC,
    Q_ENDTIMER =&gt; MALvl2or3.Q_ENDTIMER,
    T_ENDTIMER =&gt; MALvl2or3.T_ENDTIMER,
    D_ENDTIMERSTARTLOC =&gt; MALvl2or3.D_ENDTIMERSTARTLOC,
    Q_DANGERPOINT =&gt; MALvl2or3.Q_DANGERPOINT,
    D_DP =&gt; MALvl2or3.D_DP,
    V_RELEASEDP =&gt; MALvl2or3.V_RELEASEDP,
    Q_OVERLAP =&gt; MALvl2or3.Q_OVERLAP,
    D_STARTOL =&gt; MALvl2or3.D_STARTOL,
    T_OL =&gt; MALvl2or3.T_OL,
    D_OL =&gt; MALvl2or3.D_OL,
    V_RELEASEOL =&gt; MALvl2or3.V_RELEASEOL
}</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="580"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="FullTrackDescriptionAvailable"
 Guid="3f902f3d-ba04-401b-8cb7-6dec20472418"
>
<ReqRef
 Id="63f87a6b-8c3e-4333-b97e-9e417e3623d8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="79426624-3172-4e01-905e-c6f842754e2d"
>
</ReqRef><ReqRef
 Id="5fff9a06-3432-4ce9-b8e0-9b36de116805"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a3599a2e-5b3f-4ae4-b506-f7fb8e2fc079"
>
</ReqRef><ReqRef
 Id="c610a0e4-7479-4ceb-8944-e767ebd408b8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="744307fe-5cb3-4db4-bbf6-5a792c959735"
>
</ReqRef><Comment>Indicates if the full track description (SSP + grandient) is available for the newly received MA. &quot;given together with the MA&quot; is not considered here because A1.1.6.2 ensures all relevant information has been processed at the time of evaluation of this function.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="4fff5cf5-b388-41d2-8003-2c23c9414f1e"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="d5333f4d-b410-46c7-95c6-2a1a5b3bee9b"
>
<Expression>FullTrackDescriptionAvailableForDistanceInterval
(
  Default.MessageTypes.QScaleLength
  (
    length =&gt; (SUM Packet.Sequence1 USING X IN X.L_SECTION) + Packet.L_ENDSECTION,
    scale =&gt; Packet.Q_SCALE
  )
)</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="470"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="AcceptMA"
 Guid="2b06bc8f-a6b6-4fbe-ab3f-3b81193ce0d7"
>
<ReqRef
 Id="ddf1106f-1c68-46d4-bb66-180ab706aa8e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ec6ee5a5-aba2-4618-b45f-6c9d875a8eaa"
>
</ReqRef><ReqRef
 Id="ee4976a9-43b5-48a3-83fa-b4b49e47c1a8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2b826e2a-2d34-496e-a3c9-e8f51ed8e8b0"
>
</ReqRef><ReqRef
 Id="9be8a6ae-9abe-4a16-8a19-f28a0581c994"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d2904bf6-1131-4253-aad3-a1b8f26d9f43"
>
</ReqRef><ReqRef
 Id="c610a0e4-7479-4ceb-8944-e767ebd408b8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="11dd8c43-c89c-4fc2-a7da-e74870227574"
>
</ReqRef><Comment>Indicates whether the MA received in the handled packet is valid</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="1036d46e-5bf8-4cad-85bb-bfa9585a87a7"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Full track description not available"
 Guid="e0b694f9-3a5f-48cd-93c8-06424ca09f3f"
>
<PreConditions>
<PreCondition
 Guid="00d7cd05-a9ec-410b-84e7-e65a24ffc933"
>NOT FullTrackDescriptionAvailable(Packet =&gt; Packet)</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="The train is tripped"
 Guid="550702ae-e019-451f-8b45-c5e05f21be0c"
>
<PreConditions>
<PreCondition
 Guid="df6aa353-159b-4d1e-aab6-259ec49faed8"
>Mode == Default.Mode.TR</PreCondition></PreConditions>
<Expression>Boolean.False</Expression>
</Case><Case
 Name="Otherwise"
 Guid="604836d9-ccc9-41e8-b9d5-a815ab25a7f2"
>
<Expression>Infill.Data == EMPTY
  OR
  (
    Infill.Data != EMPTY
      AND
    Kernel.Mode in [ Mode.FS, Mode.LS ] 
      AND
    BTM.Linking.DistanceToBaliseGroup ( Infill.Data.NID_BG ) != BaseTypes.Distance.Unknown
  )</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Default=""
 X="470"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateTarget"
 Guid="4eae3efb-cf37-40c6-b570-057cfe92f4fb"
>
<Comment>Creates a structure of type Kernel.SpeedAndDistanceMonitoring.TargetSupervision.Target to be inserted in a collection</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Length"
 Name="aLength"
 Guid="19ee40a1-1c14-4335-9c10-ba93e1f10c50"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="aLocation"
 Guid="be24d2d0-10d8-450c-9e0a-02ed43a8c656"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Speed"
 Name="aSpeed"
 Guid="1c00a9ac-74f3-49ee-b5e4-377bdb739c13"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Create a Target item"
 Guid="007ca2b0-325c-4d7c-9d0d-91c1956a9c62"
>
<Expression>SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target 
{
    Length =&gt; aLength,
    Location =&gt; aLocation,
    Speed =&gt; aSpeed
 }</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Default=""
 X="360"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ClosestTarget"
 Guid="cafbe57a-b0c3-4040-b9ad-e2a5ef544a40"
>
<Comment>Returns the Target, EOA or SvL, with the closest Location</Comment>
<Parameters>
<Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="Target1"
 Guid="c87fc4ae-7099-42f6-ac05-c31337c8482e"
>
</Parameter><Parameter
 Type="Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target"
 Name="Target2"
 Guid="ab06e05e-c9e5-482d-b89c-212bfea05d5b"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Target1 &gt; Target2"
 Guid="02b5439b-5aed-4aee-be41-d98dc687b3dd"
>
<PreConditions>
<PreCondition
 Guid="499fd9ac-9444-4444-9617-752e11984521"
>Target1.Location &gt; Target2.Location</PreCondition></PreConditions>
<Expression>Target2</Expression>
</Case><Case
 Name="Otherwise"
 Guid="4f50de9a-b574-43d0-b9cd-fac4a9d4b3ec"
>
<Expression>Target1</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="580"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ShortenedMAIsAccepted"
 Guid="1891bebe-22be-4c1a-89f9-80a427758759"
>
<ReqRef
 Id="26d39c75-1c24-46e6-b725-d71bd2fbd1c3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="824425e1-3a34-448f-8987-803cd6e72e2e"
>
</ReqRef><ReqRef
 Id="c11c2ace-e3a5-4fe7-9621-b28a5a50f720"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7dec6ae6-cf88-4abd-941a-de545fe4a4fb"
>
</ReqRef><ReqRef
 Id="d88061c9-dc9a-4ffc-8134-4bc8eef39511"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="87020019-c181-451a-bc6d-2ecd3d4e8350"
>
</ReqRef><ReqRef
 Id="bc02069a-b3f9-44d3-ae1b-fb27d71bb51d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7a8b15f1-1207-4f8a-b0ef-ac53d671ecfb"
>
</ReqRef><Comment>Indicates whether the shortened MA sent by RBC is accepted.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.Message"
 Name="aShortenedMA"
 Guid="5c891ee4-a50f-478d-85e4-84cdab2858d1"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="9481bd1d-6bc4-4ebc-8167-a44b76beb265"
>
<Expression>TrainPosition.FrontEndPosition( PointOfInterest =&gt; DistanceInterval.Nom )
  &gt; SpeedAndDistanceMonitoring.TargetSpeedMonitoring.SupervisionStatus.d_I_Target
(
    Vest =&gt; Odometry.EstimatedSpeed,
    aTarget =&gt; SpeedAndDistanceMonitoring.TargetSpeedMonitoring.Target
    {
        Location =&gt; MessageTypes.QScaleDistance
        (
            distance =&gt; (SUM aShortenedMA.Sequence1 USING X IN X.L_SECTION) + aShortenedMA.L_ENDSECTION,
            scale =&gt; aShortenedMA.Q_SCALE
        ),
        Speed =&gt; 0.0,
        Length =&gt; 0.0
    }
)</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Default=""
 X="470"
 Y="190"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SectionStartLocation"
 Guid="ee87661a-2b01-46a0-9be2-7aac8b6724c0"
>
<ReqRef
 Id="8298df3a-f507-437d-a5de-ceceaeedbead"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="be688a17-08c2-45ac-860d-4946c45dceb8"
>
</ReqRef><Comment>Returns the start location of a section of the MA</Comment>
<Parameters>
<Parameter
 Type="Kernel.MA.Section"
 Name="aSection"
 Guid="c3fe6210-d819-4557-a8c0-2de313092a40"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="65bba70d-e974-4519-b326-f1d8b12a131e"
>
<Comment>Returns the distance if the section has a time-out</Comment>
<Expression>BaseTypes.LengthToDistance
(
    SUM MA.Sections | 
        Before(
            ExpectedFirst=&gt;X,
            ExpectedSecond=&gt;aSection,
            Collection=&gt;MA.Sections
        )
    USING X IN X.Length
)</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="250"
 Y="190"
 Width="100"
 Height="50"
 NeedsRequirement="FALSE"
 Name="EndOfMA"
 Guid="f5b47b4a-7787-4424-924d-9691547252f3"
>
<Comment>Returns the distance to the end of the End Section of the MA</Comment>
<Cases>
<Case
 Name="Sections defined"
 Guid="47b85941-c8fc-4e27-ad29-c46207a82db3"
>
<Comment>The MA has sections</Comment>
<PreConditions>
<PreCondition
 Guid="fee6d219-56c8-47c9-b840-bc9541b651d5"
>Available(MA.Sections)</PreCondition></PreConditions>
<Expression>Default.BaseTypes.LengthToDistance ( (SUM MA.Sections USING X IN X.Length) + MA.EndSection.Length )</Expression>
</Case><Case
 Name="No sections"
 Guid="da7feeb3-3bc8-4b45-a006-7ffe4b49c1af"
>
<Comment>There is only an End Section</Comment>
<Expression>BaseTypes.LengthToDistance(MA.EndSection.Length)</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Distance"
 Default=""
 X="580"
 Y="130"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionStart"
 Guid="1775d84c-6222-482b-bc55-76a46dfdb7fd"
>
<Comment>Returns the distance of the start of the end section</Comment>
<Cases>
<Case
 Name="There are sections"
 Guid="3f457220-852f-400d-81b0-85c02da4c0ea"
>
<PreConditions>
<PreCondition
 Guid="d56e2714-804f-45b5-a3b2-be9833877d97"
>MA.Sections != []</PreCondition></PreConditions>
<Expression>BaseTypes.LengthToDistance(SUM MA.Sections
  USING X IN X.Length)</Expression>
</Case><Case
 Name="Only an end section"
 Guid="9c09af30-c90b-4397-82e8-dcfddda6ba1e"
>
<Expression>0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.MA.SectionsCol"
 Default=""
 X="580"
 Y="190"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RelocatedSections"
 Guid="d95b4db7-7716-4b40-8a5d-2045455498dc"
>
<Comment>When the reference location changes (by a certain distance), the sections in the MA need to be recalculated</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="df02a9b9-bdac-465f-a47f-c5af4e50fbe3"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="8c82922c-9f10-4433-adf3-04bd582af2fc"
>
<Expression>MAP MA.Sections | IsAfterDistance(X, Distance)
  USING X IN MakeRelocatedSection(X, Distance)</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="580"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="IsAfterDistance"
 Guid="c845997e-9449-4208-a0c9-3063804c1993"
>
<Comment>Check that the end of the section is further than the distance</Comment>
<Parameters>
<Parameter
 Type="Kernel.MA.Section"
 Name="aSection"
 Guid="e9c0973e-2bda-49a4-bd8d-8b25469d6b1d"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="7c259d6c-ba86-4d39-a9fa-403e0cb0db97"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="2d9c3618-569f-4260-b93b-ecd826d333d9"
>
<Expression>SectionStartLocation(aSection) + BaseTypes.LengthToDistance(aSection.Length) &gt; Distance</Expression>
</Case></Cases>
</Function><Function
 Type="Kernel.MA.Section"
 Default=""
 X="250"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MakeRelocatedSection"
 Guid="cb565818-cd4f-4c44-a599-87c781003075"
>
<Comment>Adjusts the length of the section if needed.
This is used for when a new reference location is received and the MA is relocated to this nex reference location.</Comment>
<Parameters>
<Parameter
 Type="Kernel.MA.Section"
 Name="aSection"
 Guid="95813a59-766c-4336-830b-b3c083326ab7"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="0d77381d-892c-4be0-b256-adb4bcf4eaf7"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Is the new first section"
 Guid="b5a656f5-558b-4131-a8d6-a61ab01b1d42"
>
<PreConditions>
<PreCondition
 Guid="3377ed4c-7c63-4b30-a765-879d60dee192"
>SectionStartLocation(aSection) &lt; Distance</PreCondition><PreCondition
 Guid="ec823700-cb99-43ab-9553-ef7bd611d85a"
>IsAfterDistance(
    aSection=&gt;aSection,
    Distance=&gt;Distance
)</PreCondition></PreConditions>
<Expression>Section{
    Length =&gt; aSection.Length - BaseTypes.DistanceToLength ( Distance - SectionStartLocation(aSection) ),
    TimeOut =&gt; aSection.TimeOut
}</Expression>
</Case><Case
 Name="Is another section"
 Guid="f1575324-1ceb-4946-b4cf-227f99c0b679"
>
<Expression>aSection</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="470"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="FullTrackDescriptionAvailableForDistanceInterval"
 Guid="36b5a937-717f-4f60-a667-3fd84cdda4a0"
>
<ReqRef
 Id="63f87a6b-8c3e-4333-b97e-9e417e3623d8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b404fca5-2ab2-493c-baaf-a8eeddc1d8a6"
>
</ReqRef><ReqRef
 Id="5fff9a06-3432-4ce9-b8e0-9b36de116805"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0f07c7f8-8b1d-4794-81b9-c1d261b4aa3e"
>
</ReqRef><Comment>Indicates if the distance interval provided as parameter is fully covered by the track description (SSP + gradient).</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Length"
 Name="aDistanceInterval"
 Guid="1e8c4f20-5a79-4fda-9dd3-56eb3051e2f7"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="SSP does not cover required length"
 Guid="b29c3310-7396-4241-abfd-98a86531a0f0"
>
<PreConditions>
<PreCondition
 Guid="f924c4c6-4cde-4b20-af66-c70d48f076d4"
>Kernel.TrackDescription.StaticSpeedProfile.SSP == []
  OR
Kernel.TrackDescription.StaticSpeedProfile.SSPEnd ( Current =&gt; LAST X IN Kernel.TrackDescription.StaticSpeedProfile.SSP )
  &lt; 
Default.BaseTypes.LengthToDistance( aDistanceInterval )</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Gradient information does not cover required length"
 Guid="cea59c88-cd6c-410d-a2d8-b65efc841bc6"
>
<PreConditions>
<PreCondition
 Guid="7a11d20e-5b84-4027-b9dc-cdcb8e629093"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR
Kernel.TrackDescription.Gradient.GradientEnd(Current =&gt; LAST X IN Kernel.TrackDescription.Gradient.Gradients)
  &lt;
Default.BaseTypes.LengthToDistance ( aDistanceInterval )</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Otherwise"
 Guid="65d1b600-ae05-4297-a75f-69ba7f8415ab"
>
<Expression>True</Expression>
</Case></Cases>
</Function><Function
 Type="Default.BaseTypes.Speed"
 Cacheable="TRUE"
 Default=""
 X="140"
 Y="250"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SvLSpeedRestriction"
 Guid="c09b13a8-c006-4b38-9a2d-79bba2d6cf2b"
>
<Comment>Provides a speed restriction based on the SvL</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="4c792cc1-644f-4b5e-8e8d-29956e2100c7"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="After SvL"
 Guid="cb600d40-75cb-4d27-b606-668e047c32b3"
>
<PreConditions>
<PreCondition
 Guid="daa2477a-ebf3-4dee-84db-6c860705b267"
>Distance &gt;= SvL().Location</PreCondition></PreConditions>
<Expression>0.0</Expression>
</Case><Case
 Name="Before SvL"
 Guid="68888f36-e2f9-4b64-802f-0722fcc4b5d1"
>
<Expression>BaseTypes.Speed.MaxSpeed</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="850"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MALvl2or3Received"
 Guid="378f83b5-170c-4c7f-afd4-18cc1e467fe4"
>
<ReqRef
 Id="9f918f6f-f470-4613-ab97-374dc595ce7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4b9f3ea1-bcff-43b8-a127-4ac234dfd7cd"
>
</ReqRef><ReqRef
 Id="f4723221-15fd-4636-851f-08a437cc18e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e6bcd4eb-a286-47b1-acb0-fb7b0e350571"
>
</ReqRef><Comment>Determines for which direction is applicable the received MA and calls the appropriate procedure to update the appropriate MA.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_2_3_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="312f1bb7-65aa-4453-bc63-26f53d29b24f"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
 Guid="e30eabf9-dbd6-4355-bee8-27b2e2e7ce7d"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="4dc676aa-f0e6-4858-8811-4526592f5424"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Handle new MA"
 Guid="6fc7171c-6986-4137-bdd6-b65a06a83d84"
>
<Comment>Updates the stored MA with the information from the packet.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Handle new MA"
 Guid="ddb3309f-db79-43b7-938a-d3dc7c9abd43"
>
<PreConditions>
<PreCondition
 Guid="0e3998df-1466-494e-970e-1f5815fd1e46"
>FullTrackDescriptionAvailable(Packet =&gt;  ConvertMALvl2or3_to_MALvl1 ( Packet ))</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c6a9825b-4180-4447-a067-78ee2400685c"
>UpdateMA
(
    Packet =&gt; ConvertMALvl2or3_to_MALvl1 ( Packet ),
    NID_BG =&gt; NID_BG,
    SectionStartTimer =&gt; SectionStartTimer
)</Action><Action
 Guid="3e4d5ecc-98c0-4000-9d12-5b63e89e74c7"
>MAIsAccepted &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Exit override"
 Guid="b017fc6d-6cf9-4e6e-8669-bcbb31cafac5"
>
<ReqRef
 Id="6d584b1c-04b7-424f-9087-e95a0cf7c65d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a6bf2139-c3b6-4d32-8abf-3e6447513ef5"
>
</ReqRef><ReqRef
 Id="772e0087-dcb8-45bf-a888-56863cd592af"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c53d8ba1-e994-4318-9d8a-5e790e6ee731"
>
</ReqRef><Comment>Ends the Override function if the MA received is not a trip order (if V_MAIN != 0).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Exit override"
 Guid="5e50dd51-a694-490a-986d-fc58ddaba209"
>
<PreConditions>
<PreCondition
 Guid="bd46248f-d028-4d5e-95b6-25ea8c62ed58"
>HandleModeChange in HandleModeChangeSM.Override</PreCondition></PreConditions>
<Actions>
<Action
 Guid="fec4ea71-9030-4796-a90a-2d1c21a90d00"
>EndOverride()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="740"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MALvl1Received"
 Guid="8c3e9d6b-09c9-4fc2-9ccd-c0714332dfae"
>
<ReqRef
 Id="20241a08-e360-4144-b573-5a0e657dd9a2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d815577a-8ca4-4355-a39a-af5d3d99eaba"
>
</ReqRef><ReqRef
 Id="13aed33d-db2d-43fb-a5bf-be02674ae095"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6609a045-df06-4dea-8fbc-4633d72658f7"
>
</ReqRef><ReqRef
 Id="7f3ae822-7b90-4352-9369-c4e3ce05a91e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ceeb7429-f3c0-4971-a745-af6ed2550759"
>
</ReqRef><ReqRef
 Id="f4723221-15fd-4636-851f-08a437cc18e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="840ddf85-feab-4bc4-b546-417584b9c55c"
>
</ReqRef><Comment>Determines for which direction is applicable the received MA and calls the appropriate procedure to update the appropriate MA.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="463fa7cb-d178-49da-8089-4913f650d73d"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
 Guid="284e8fa0-176d-49b0-850c-13427e6769ec"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 Name="Store information"
 Guid="59782eb8-89ce-4ed7-a9e4-be2e7479b21f"
>
<Comment>Updates the stored MA with the information from the packet.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Store MA information"
 Guid="24f6ec7d-dba8-491e-843b-cb222002046b"
>
<ReqRef
 Id="40e65850-da07-4c7a-bd9f-43c30f8a20a5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="39fafddb-6147-4359-80b0-ca5993b268b3"
>
</ReqRef><ReqRef
 Id="4a580e9d-fd64-4951-b7a4-51530d1469e7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7ef76590-6199-4b24-8ff8-2a6bb2c90930"
>
</ReqRef><ReqRef
 Id="d833d8f6-90b9-499b-bdb1-408971c2cbfe"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0f31c8ce-57e8-48e3-a5b6-3506a69a8199"
>
</ReqRef><ReqRef
 Id="0d501890-d967-43e6-b663-c526a3371860"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3a4ca2cf-0b50-4c9b-b314-f32a554ec7aa"
>
</ReqRef><ReqRef
 Id="f9ca42e2-644d-47a2-b6e3-80059c79e361"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="71e2701d-8dbf-465b-b542-3eb2fe6e9835"
>
</ReqRef><ReqRef
 Id="0e6a08d0-98b2-451c-bd8b-74b39807dde8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3425acbd-4984-4092-ba24-f889e46845f1"
>
</ReqRef><PreConditions>
<PreCondition
 Guid="9f480703-6045-4959-8238-ce2a2407ae11"
>AcceptMA( Packet =&gt; Packet )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0b32d029-1703-4f17-9be3-7ba6576b3c68"
>UpdateMA
(
    Packet =&gt; Packet,
    NID_BG =&gt; NID_BG,
    SectionStartTimer =&gt; MATimers.CurrentBGTimeOfPassage
)</Action><Action
 Guid="f8a42f47-6bf7-4155-9ad4-52eb896fbff6"
>SignallingRelatedSpeedRestriction &lt;- Default.MessageTypes.SpeedResolution ( speed =&gt; Packet.V_MAIN, resolution =&gt; 5.0 )</Action><Action
 Guid="80edc04f-5273-4997-8bd5-e5b012a9c650"
><Comment>Current BG time of passage becomes section timer start</Comment>
MATimers.LOATimerStart &lt;- MATimers.CurrentBGTimeOfPassage</Action><Action
 Guid="e1d644fe-308d-4060-a4cc-c14066ce2a1e"
>MAIsAccepted &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Train trip order"
 Guid="cfbd968f-f68f-4cd6-85c8-9bfc46c1f134"
>
<ReqRef
 Id="e8d016fe-f419-450e-a7e5-261b1035e3cc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="151477a9-3a3a-40e1-a984-f4403b43f327"
>
</ReqRef><ReqRef
 Id="8c086287-3454-4b36-8382-3b59a0debda0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="080ffc52-67c5-4270-857f-817ac767d00f"
>
</ReqRef><Comment>Initiates a train trip if the received MA orders it.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Trip order received"
 Guid="e8d13251-e995-4b36-99fa-c6063c1bbd42"
>
<PreConditions>
<PreCondition
 Guid="24fa9f46-1301-47de-99ce-2c32073aec79"
>Packet.V_MAIN == 0</PreCondition><PreCondition
 Guid="e0d4c189-2d3a-447c-847b-21b748321d56"
>Infill.Data == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="430affa2-f9d2-4aa8-9feb-f862786a55c4"
>SpeedAndDistanceMonitoring.TrainTripped &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Exit override"
 Guid="ff43d19a-fa07-4aa5-b6aa-e05ff5f114d0"
>
<ReqRef
 Id="26a62de7-212e-49df-b2c4-e9ad9a16303c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e40740d0-1cb6-4e94-b03f-6c72d9005ec9"
>
</ReqRef><ReqRef
 Id="772e0087-dcb8-45bf-a888-56863cd592af"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="154d3390-eeb7-4179-a42a-789e2abe0f3d"
>
</ReqRef><Comment>Ends the Override function if the MA received is not a trip order (if V_MAIN != 0).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Exit override"
 Guid="04673d35-78fe-4e4b-b203-8aba00c6486f"
>
<PreConditions>
<PreCondition
 Guid="6c1d680b-de67-4a2b-b1e5-4f97fa26d8d4"
>HandleModeChange in HandleModeChangeSM.Override</PreCondition><PreCondition
 Guid="18ef947f-814b-4b60-9630-be17bd17273e"
>Packet.V_MAIN != 0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="2b82f74d-810e-4f72-977c-0ca411d9a9bd"
>EndOverride()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="740"
 Y="270"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="UpdateMA"
 Guid="42292706-6baf-47a0-aefc-be6ee6030aaf"
>
<ReqRef
 Id="20241a08-e360-4144-b573-5a0e657dd9a2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="782774b1-d899-4424-abd8-51a040a8a72f"
>
</ReqRef><ReqRef
 Id="82d5bd61-4bef-4cfb-a68a-312446d79df1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c854f642-e58c-497e-b961-781a5669b671"
>
</ReqRef><ReqRef
 Id="c579a0d5-fcc0-4564-bbf3-599cd68b9344"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="499755e6-9445-4626-9972-592333bd2076"
>
</ReqRef><ReqRef
 Id="76a67f0f-9afc-46c4-80b9-b7a211017100"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="93da8eab-c16d-4e10-af07-b5464a42a64b"
>
</ReqRef><Comment>Updates the stored MA with the information from a new level 1 (or converted level 2 or 3) movement authority</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="a470a1bd-758c-46c3-8b3f-f995e79d1f7a"
>
</Parameter><Parameter
 Type="Messages.NID_BG"
 Name="NID_BG"
 Guid="64a6d581-678f-43a5-9cde-ce68d2052fdd"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="2e880274-ffee-4f27-b59e-f1d655b920d1"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Store previous information"
 Guid="2c71883e-4454-4fb3-81ba-ab1d2e464a82"
>
<ReqRef
 Id="d8e470e4-30ad-41be-8c8d-9828fc218d73"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d3620d62-574f-4d4a-8539-6d7347681453"
>
</ReqRef><ReqRef
 Id="0c39084a-19e8-4784-962f-8dd4ba8a2aee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8ae016cd-1801-47e7-a461-58dd80fcf3aa"
>
</ReqRef><Comment>If the on-board was supervising an SvL, its location is stored in order to be compared with the new SvL (if any) to detect the possible shortening.

If the on-board was supervision an LOA and will receive a SvL with the new MA, then it will be considered as shortening, regardless the location.

The information about the type of supervised target (SvL or LOA) is also stored, to determine the kind of shortening (regardless the location or not).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="SvL"
 Guid="1bdb0b15-38b6-4e9f-9a51-94ff2db10a46"
>
<Comment>Store the previous SvL, if any, in ShorteningHandler to check for a MA shortening</Comment>
<PreConditions>
<PreCondition
 Guid="51bdba26-9465-413b-af5e-004242826ec0"
>Available ( MA )
  AND  
SvL() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0dab86fc-3cea-42d4-a180-592e92f08cc4"
>ShorteningHandler &lt;- MaShorteningHandler
{
    Location =&gt; SvL().Location,
    IsSvL =&gt; True
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="LOA"
 Guid="12c3d848-e54b-474a-b939-e0c4b8b27b38"
>
<Comment>If the on-board was not supervising a SvL and one is received, this will always be considered a MA shortening</Comment>
<PreConditions>
<PreCondition
 Guid="fcd92312-44cd-4e8f-a36f-9d2e11fe0416"
>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="2da3de98-5d2c-4ec0-ab71-2dcfd1efb4f5"
>ShorteningHandler &lt;- MaShorteningHandler
{
    Location =&gt; BaseTypes.Distance.Unknown,
    IsSvL =&gt; False
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 Name="Update common fields"
 Guid="82a191c5-efd4-43f7-8044-7c64dd434824"
>
<ReqRef
 Id="20241a08-e360-4144-b573-5a0e657dd9a2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="49cad3ca-8139-4ade-b9f9-ee9375c60601"
>
</ReqRef><ReqRef
 Id="9d444c1e-f8ce-44ed-adb0-f81c08abac75"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a4225d83-0f99-41e4-971e-979cb879b405"
>
</ReqRef><ReqRef
 Id="03cd0321-724a-4dbf-ae18-99839cda8019"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="52ea3bcf-99fc-48ba-8800-960d38075c35"
>
</ReqRef><ReqRef
 Id="5aa1fa8e-68c3-4f4f-83d8-b6d2b462a508"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7118476f-f5e7-41cd-a83b-2d10693a12d5"
>
</ReqRef><Comment>Update the target speed and the time-out of the target speed</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MA was available"
 Guid="79fc59ef-ca56-48ba-92b2-c20ee6db13ed"
>
<Comment>If MA was already available, we can directly modify its fields</Comment>
<PreConditions>
<PreCondition
 Guid="7397c026-591e-4bf0-885d-fffe991c4cc0"
>MA != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7120a773-d361-414d-ba1e-3aa621fc8986"
>MA.TargetSpeed &lt;- MessageTypes.SpeedResolution ( Packet.V_LOA, 5.0 )</Action><Action
 Guid="46a073cd-a242-427d-995f-7f060c69493f"
>MA.TargetSpeedTimeOut &lt;- BaseTypes.Time ( Packet.T_LOA )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA was available"
 Guid="f48c3e07-3eaa-41b0-ae8b-9ead586f707f"
>
<Comment>If no MA was available, we have to create a new MA</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5b63b2df-359c-4b16-a541-ccc42b459fce"
>MA &lt;- Kernel.MA.MAStruct
{
    TargetSpeed =&gt; MessageTypes.SpeedResolution ( Packet.V_LOA, 5.0 ),
    TargetSpeedTimeOut =&gt; BaseTypes.Time ( Packet.T_LOA )
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Handle information according to infill status"
 Guid="9dd23dbd-a238-4098-830f-ac2d73d2bea4"
>
<Comment>Fills the collection of Sections in MA regularly or as infill data and updates the reference BG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Infill"
 Guid="716d6964-33c2-46d8-94ca-a6c21c85a8f3"
>
<ReqRef
 Id="4f9e6037-be46-477d-bbca-3122bd9ad940"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="153baedb-1e0b-4563-8b1c-6882b6db13a2"
>
</ReqRef><ReqRef
 Id="9c420bdc-a561-406b-a479-9d6cbde196a6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="02e56436-d17c-41d0-8e77-72598cd5f4d2"
>
</ReqRef><ReqRef
 Id="55512f96-4453-4790-88cb-a4324c3a4a22"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="52485ec4-7a71-4a7f-b120-731b12b2b40e"
>
</ReqRef><ReqRef
 Id="d9235eb8-4b37-4376-98fc-a488932db020"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="32feab52-c8f0-4803-bba9-5157404957b2"
>
</ReqRef><ReqRef
 Id="aab59034-edf0-405a-be36-77d7bb4b775a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b0307fef-6c6e-46fa-984f-2a6dce58957f"
>
</ReqRef><Comment>Update sections with infill data</Comment>
<PreConditions>
<PreCondition
 Guid="1e6e687c-5882-4108-bab0-9fc4a8b43011"
>Kernel.Infill.Data != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="72e4e499-b2a3-4def-8b72-ed0903b42191"
>UpdateSectionsForInfill
(
    InfillDistance =&gt; BTM.Linking.DistanceToBaliseGroup ( Infill.Data.NID_BG ),
    Packet =&gt; Packet,
    SectionStartTimer =&gt; SectionStartTimer
)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="No infill"
 Guid="0e953952-6896-42ad-88e7-5dc8d1d43b50"
>
<ReqRef
 Id="5aa1fa8e-68c3-4f4f-83d8-b6d2b462a508"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fb4606fa-75a1-4722-8be7-4e6c01c72743"
>
</ReqRef><Comment>Update sections with regular MA information</Comment>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update sections"
 Guid="27032af7-e786-4520-9d83-9853f7d57eaa"
>
<ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="66f6ef21-15cd-4902-b515-d6c89ad1612c"
>
</ReqRef><ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fe502f9a-5032-42c4-bce3-ad6b48627296"
>
</ReqRef><Comment>Replace the current sections with the ones received in Packet</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SectionsAvailable"
 Guid="b8133cb8-fdf2-4828-9dc8-40dd276f41d9"
>
<Comment>The packet contains MA sections, map them to MA.Sections</Comment>
<PreConditions>
<PreCondition
 Guid="d4ede40b-9fe9-4e43-970d-e6c57675d9b3"
>Packet.N_ITER != 0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="12b90b2e-7d29-48ba-9284-89ff10da7e8f"
>MA.Sections &lt;- MAP Packet.Sequence1 USING X IN CreateEFSSection
(
    ERTMSSection =&gt; X,
    Scale =&gt; Packet.Q_SCALE,
    SectionStartTimer =&gt; SectionStartTimer
)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SectionsNotAvailable"
 Guid="a5cc82f2-6a55-4b71-a4bd-db31ffda3b10"
>
<Comment>The packet only contains an End Section, MA.Sections is empty</Comment>
<PreConditions>
<PreCondition
 Guid="90fa6c72-b1aa-4f87-899e-c0ff98eac4f5"
>Packet.N_ITER == 0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="abac060f-6a4c-4704-a40e-f0ec2245ca72"
>MA.Sections &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Update end section"
 Guid="23071766-2e94-42fa-b132-c6626baafd5c"
>
<ReqRef
 Id="6429b85c-2e6f-4225-8997-9701a98eacd4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fbb43c77-8703-4a60-8c64-aa19b573c67e"
>
</ReqRef><ReqRef
 Id="21d0760f-a057-466a-bdf0-41f316e4721c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="108dda28-db26-4392-af36-bd76e842b2a4"
>
</ReqRef><ReqRef
 Id="5aa1fa8e-68c3-4f4f-83d8-b6d2b462a508"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f7b6b4c8-a798-4beb-bcad-0dcbf7e1bb91"
>
</ReqRef><ReqRef
 Id="4f9e6037-be46-477d-bbca-3122bd9ad940"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6fb400c6-3db1-4eca-ba93-1e1529da4233"
>
</ReqRef><Comment>Update all the information relative to the End Section</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update end section"
 Guid="6ff5e3f5-a719-4136-814e-5b1c80484e3e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="9925cd9d-52d7-44fd-99e6-fb6ca1dd0635"
>MA.EndSection.Length &lt;- MessageTypes.QScaleLength ( Packet.L_ENDSECTION, Packet.Q_SCALE )</Action></Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Check end section timer"
 Guid="8dd58980-55ef-4bb2-b236-e4152bf43630"
>
<Comment>When a new MA is received, checks if the start location of the end section of the new MA is in the rear of the train and in that case simulates the expiration of the end section timer.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No old End Section timer and new End Section timer in rear of train"
 Guid="a3d8ec2b-2f88-4a34-b5d1-1939d532a663"
>
<ReqRef
 Id="7e423212-aebc-4610-85f4-e4a25b5e05c4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bde31faa-ad93-4f46-8ee6-12e8fb791df0"
>
</ReqRef><ReqRef
 Id="f628074f-59c1-494b-b268-4ca4bf339038"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="62a155f4-a306-4bd2-9d76-63c45935e169"
>
</ReqRef><ReqRef
 Id="c6215fef-5d78-4d0c-bab4-b041b7e0c571"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8092c8a9-b72e-41e1-be9e-1449ed98f4ee"
>
</ReqRef><ReqRef
 Id="1e99ff79-c41c-4625-9938-941b2814fbc6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="27e5ad78-79ba-4326-88a9-8b5a2736d0b3"
>
</ReqRef><Comment>If the newly received MA has a End Section timer with the start location in rear of the train, and the train is not currently running an End Section timer, assume that the time-out value has been reached (by updating the value of the timer).
In this case, the EOA should be moved to the train&apos;s current position with no release speed.</Comment>
<PreConditions>
<PreCondition
 Guid="8318e86d-1fe7-4e37-a347-0e2fb6093309"
>(Packet.Q_ENDTIMER == Messages.Q_ENDTIMER.End_section_timer_information_to_follow)
  AND  
( 
  Default.MessageTypes.QScaleDistance(
      distance=&gt;Packet.D_ENDTIMERSTARTLOC,
      scale=&gt;Packet.Q_SCALE
  ) &lt; TrainPosition.FrontEndPosition(Default.DistanceInterval.Max)
)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="e5dd653d-5eb0-4e34-b050-c3abad8a6525"
>MATimers.EndSectionTimerStart &lt;- DateAndTime.CurrentTime - BaseTypes.Time ( Packet.T_ENDTIMER )</Action><Action
 Guid="72934c18-ce47-4fc9-8041-2427d0965cbf"
>HandlingOfAcceptedAndStoredInformation.EndSectionTimeOutShortensMA &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Check overlap timer"
 Guid="1435801b-bb35-40e4-821c-64e45f56e759"
>
<Comment>When a new MA is received, checks if the start location of the overlap of the new MA is in the rear of the train and in that case simulates the expiration of the overlap timer.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No Overlap timer and new Overlap timer in rear of train"
 Guid="345e8491-a696-4ee4-bf01-c4fa7c944c37"
>
<ReqRef
 Id="0e4b96b4-eebf-407d-839d-227cc544b37a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8f623633-ed28-42ac-aaa6-af737d5f9d9f"
>
</ReqRef><PreConditions>
<PreCondition
 Guid="1abe8fa0-b26c-4fc1-914a-75ad390bbe7f"
>Packet.Q_OVERLAP == Messages.Q_OVERLAP.Overlap_information_to_follow
  AND
( 
  Default.MessageTypes.QScaleDistance
  (
      distance =&gt; Packet.D_STARTOL,
      scale =&gt; Packet.Q_SCALE
  ) &lt; TrainPosition.FrontEndPosition(Default.DistanceInterval.Max)
)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3ade456f-2e44-420d-8da8-5e67afcd2911"
>MATimers.HandleOverlapTimeout()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutAvailable"
 Guid="5ad1a127-3b7c-4360-bb49-c935aa6fb9a4"
>
<ReqRef
 Id="8d09ca53-1394-4843-b8d6-829a86336ca3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ad674fe1-3e8b-46b8-8254-9dd73a002457"
>
</ReqRef><ReqRef
 Id="86b0e1e8-53c9-4a9f-9b60-1863f04939ec"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9202bcf9-2841-44a5-9779-2ed6be58db83"
>
</ReqRef><Comment>If the End Section has a End Section Time-Out, store it</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutAvailable"
 Guid="a02608d1-1291-4ea7-bee8-173285bc0dfc"
>
<ReqRef
 Id="00bf308a-22d5-43c9-9211-8f761f8ae624"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="62abfdfa-8122-449b-9e99-ad60264bea69"
>
</ReqRef><ReqRef
 Id="176a499e-e5d0-492b-bf95-b669d5df8beb"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8883122e-c46a-4f71-9b90-ee00a4f395d1"
>
</ReqRef><Comment>Store the End Section Time-Out</Comment>
<PreConditions>
<PreCondition
 Guid="af3b60ce-279f-43a8-a3eb-9e4140738495"
>Packet.Q_ENDTIMER == Messages.Q_ENDTIMER.End_section_timer_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action
 Guid="87500986-c033-4c28-8541-ba9f21d938cd"
>MA.EndSection.EndSectionTimeOut &lt;- Kernel.MA.MATimers.TimeOut
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_ENDTIMERSTARTLOC, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time( Packet.T_ENDTIMER )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EndSectionTimeOutNotAvailable"
 Guid="b0b23c79-96f0-4b36-9956-a2da7ff274d0"
>
<Comment>If thre is no End Section Time-Out, remove any old End Section Time-Out information there may be</Comment>
<PreConditions>
<PreCondition
 Guid="b562f7d1-0273-4c11-a8ae-a02b7d08bc7d"
>Packet.Q_ENDTIMER == Messages.Q_ENDTIMER.No_End_section_timer_information</PreCondition></PreConditions>
<Actions>
<Action
 Guid="92e8a761-0538-4e07-b824-35505211de34"
>MA.EndSection.EndSectionTimeOut &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutAvailable"
 Guid="56ddb80c-f550-4304-a0bf-0278dac5457a"
>
<ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8bc36e1d-e0d9-41d2-9d91-eac35cf5c987"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5ce24ace-dbf7-47ac-a964-cedfd03a9229"
>
</ReqRef><ReqRef
 Id="e5896680-5ea9-4749-b01e-599ab85abe84"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7e23977e-d9ed-4a07-a15b-00592873bc0b"
>
</ReqRef><Comment>If the End Section has a regular Section Time-Out, record it</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutAvailable"
 Guid="47c202d4-2141-47f1-ac2e-c4db8a55e665"
>
<ReqRef
 Id="b796c06e-efd9-4a35-abfc-9983a477fc35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c592fc9c-27b1-40b9-9326-8b77fbde9c2f"
>
</ReqRef><Comment>Store the Section time-Out for the End Section</Comment>
<PreConditions>
<PreCondition
 Guid="25bdcb96-339b-4531-a916-c85ce62be31c"
>Packet.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.Section_Timer_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action
 Guid="accafb31-0bfe-4626-8086-677db8bffb6e"
>MA.EndSection.TimeOut &lt;- Kernel.MA.MATimers.TimeOut
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_SECTIONTIMERSTOPLOC, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time ( Packet.T_SECTIONTIMER )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TimeOutNotAvailable"
 Guid="6e5aec02-6784-4813-8c60-c6b6f8962c55"
>
<Comment>If thre is no Section Time-Out for the End Section, remove any old Time-Out information there may be</Comment>
<PreConditions>
<PreCondition
 Guid="9dbec42b-a000-45d1-97c3-843c4d509b70"
>Packet.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.No_Section_Timer_information</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7fa07d9a-50f7-470e-bcc3-04c84e5ef484"
>MA.EndSection.TimeOut &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointAvailable"
 Guid="599819c1-a78c-4604-9104-1d2626c953b5"
>
<ReqRef
 Id="53a5391c-db43-4e26-95c4-26b8316d77a8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="893c58a7-32d1-4edc-96d5-c4f75edd5bc5"
>
</ReqRef><ReqRef
 Id="48fba67a-8f19-4715-92e7-aea531d01881"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3075d4f0-28e7-4d84-b682-10578bc63584"
>
</ReqRef><ReqRef
 Id="30dda18a-b11e-4bbe-a761-8fe4113de2e5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="932e17a2-668b-46d5-8ae0-652c49c0221f"
>
</ReqRef><Comment>If the Packet contains a Danger Point, record it</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointAvailable"
 Guid="c92c6cdc-f845-4864-a328-f99bf34ce4eb"
>
<ReqRef
 Id="530b6e5d-9ed2-460a-bc4f-9e158ad1c0b1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ec869468-5ec8-425e-9359-841e366ab580"
>
</ReqRef><ReqRef
 Id="1b773b1d-8ba0-43bd-abfb-9c45b0550e35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f3a6ae8a-d961-43a5-bd83-004b2d380e09"
>
</ReqRef><ReqRef
 Id="646fea43-0ea3-400a-89a4-02268d193745"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="55b7cdc6-44e9-48ab-b042-4ec67cd17b9e"
>
</ReqRef><Comment>If there is a Danger Point, store it</Comment>
<PreConditions>
<PreCondition
 Guid="f07ca779-84c5-4804-add0-0393d8d1866d"
>Packet.Q_DANGERPOINT == Messages.Q_DANGERPOINT.Danger_point_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action
 Guid="97964995-0ab1-4bb4-93bc-94059d238ec4"
>MA.EndSection.DangerPoint &lt;- DangerPoint
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_DP, scale =&gt; Packet.Q_SCALE ),
    ReleaseSpeed =&gt; CreateReleaseSpeed ( Packet.V_RELEASEDP )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DangerPointNotAvailable"
 Guid="8d37cbcc-cb87-4278-87ce-e59e0642ce06"
>
<Comment>If there is no Danger Point, remove any old Danger Point information there may be</Comment>
<PreConditions>
<PreCondition
 Guid="d0997cc0-b1a5-4e0d-b8ff-e797c75405a8"
>Packet.Q_DANGERPOINT == Messages.Q_DANGERPOINT.No_danger_point_information</PreCondition></PreConditions>
<Actions>
<Action
 Guid="25493712-fd59-4d29-a477-6270148952c9"
>MA.EndSection.DangerPoint &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateINTERNAL"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapAvailable"
 Guid="93c1b010-d21d-4c43-837d-71c4cb569a42"
>
<ReqRef
 Id="7fa6af9c-023d-474c-a0f7-8f72181a8fee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="44290e43-c076-4fa9-817f-42bb54095a88"
>
</ReqRef><ReqRef
 Id="4777cb40-cb40-4257-8324-c515327a0152"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7d10e3be-b893-4181-b40a-89fde667c74c"
>
</ReqRef><ReqRef
 Id="b3845192-4c2b-4425-bdb0-c0a568c940ea"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="881c3d56-fad3-4400-a88e-604f8ef2115a"
>
</ReqRef><ReqRef
 Id="646fea43-0ea3-400a-89a4-02268d193745"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d622832e-d82c-43e6-a465-0e396eff6c96"
>
</ReqRef><ReqRef
 Id="6052fa22-4c14-4438-bee8-59b6eae1a666"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d5c3cfaa-4e04-492f-a5a4-af2d13171019"
>
</ReqRef><Comment>If the Packet announces an Overlap, record it</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapAvailable"
 Guid="760dd271-e90b-4c57-9711-3c01bc5675fa"
>
<ReqRef
 Id="747d021b-8bdf-43c7-8a0a-a3f568408c72"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="48eb7a9c-bfba-4bd6-a620-04b955dce3e6"
>
</ReqRef><ReqRef
 Id="887d1614-89c2-401e-8b28-d47db2b19981"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a099de0f-4632-4d2c-96cc-7417eecf104c"
>
</ReqRef><ReqRef
 Id="326cbd94-a19c-4b09-941b-6c0795e922f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="33e5ade6-f70d-46dc-bf90-1bf280b002e0"
>
</ReqRef><Comment>Store the Overlap Information</Comment>
<PreConditions>
<PreCondition
 Guid="433bed91-4915-40d9-a18a-406f1c0654e7"
>Packet.Q_OVERLAP == Messages.Q_OVERLAP.Overlap_information_to_follow</PreCondition></PreConditions>
<Actions>
<Action
 Guid="1c3b0bf9-cffa-411d-98f9-5d356a986aa2"
>MA.EndSection.Overlap &lt;- Overlap
{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_OL, scale =&gt; Packet.Q_SCALE ),
    ReleaseSpeed =&gt; CreateReleaseSpeed ( Packet.V_RELEASEOL ),
    TimerDistance =&gt; MessageTypes.QScaleDistance ( distance =&gt; Packet.D_STARTOL, scale =&gt; Packet.Q_SCALE ),
    TimeOut =&gt; BaseTypes.Time ( Packet.T_OL )
}</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OverlapNotAvailable"
 Guid="9d2398c9-6d75-498f-96dd-65a0e34ddf07"
>
<Comment>If thre is no Overlap, remove any old Overlap information there may be</Comment>
<PreConditions>
<PreCondition
 Guid="55a9dd0a-fb89-4503-83d3-6b4cb2eac2e1"
>Packet.Q_OVERLAP == Messages.Q_OVERLAP.No_overlap_information</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6025c9c1-140a-4a5a-987a-8e0a1d675e04"
>MA.EndSection.Overlap &lt;- EMPTY</Action><Action
 Guid="da51d9dd-a44b-4e99-b6c5-262363713fa8"
>MATimers.OverlapTimerStart &lt;- BaseTypes.Time.NA</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Update release speed"
 Guid="647e47fc-77bb-4324-a035-94fa77e8c514"
>
<Comment>Store the release speed</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update release speed"
 Guid="1c7c9190-8e7a-44af-bd6b-0d937cb8c93a"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e5e2fcba-251a-4e6f-9ae2-515d5363a592"
>SpeedAndDistanceMonitoring.ReleaseSpeedMonitoring.UpdateReleaseSpeed()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="850"
 Y="270"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="UpdateSectionsForInfill"
 Guid="25c8f1ca-83e1-4f0d-a2db-7fff0e0f0bb3"
>
<ReqRef
 Id="9c420bdc-a561-406b-a479-9d6cbde196a6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7644767a-490e-426e-ac8a-c902d9572d14"
>
</ReqRef><ReqRef
 Id="d9235eb8-4b37-4376-98fc-a488932db020"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ce66dd99-871f-4658-938e-e02a64d3c4b9"
>
</ReqRef><ReqRef
 Id="aab59034-edf0-405a-be36-77d7bb4b775a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f73af415-0314-4a46-8ef8-0d11bfd214ed"
>
</ReqRef><Comment>This function updates the MA&apos;s sections when an infill MA is received. The following steps are executed:
 - The end section of the previous MA is inserted to the list of the sections;
 - All sections situated after the infill locations are removed (if the infill location is situated in the middle of one of sections, the section is cut at that point);
 - The sections of the infill MA are insterted after the sections of the previous MA.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="InfillDistance"
 Guid="ecde444b-9c8f-441f-b151-190bf4fc52c5"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="eb63bd74-8ab7-4816-a6c2-7f9d9679f8fd"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="de8e380d-d4cf-4e28-b3f5-b58648426ca6"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add end section to the list of sections"
 Guid="f9af134c-8397-4b23-b84b-c1ccaef19ccd"
>
<Comment>The end section, if non empty, is added to the list of sections: that allows the automatic handling of all the sections.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add end section to the list of sections"
 Guid="69aefd4b-eae4-47dc-8675-b500ce866345"
>
<PreConditions>
<PreCondition
 Guid="a88bffd1-d674-4e7c-b290-12f6021f1d4d"
>MA.EndSection.Length &gt; 0.0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7fb541c1-0d75-45be-a1ef-915b09be7db9"
>INSERT
Section
{
    Length =&gt; MA.EndSection.Length,
    TimeOut =&gt; MA.EndSection.TimeOut
}
IN MA.Sections</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
 Guid="4429c072-6f72-4d1d-887d-5af30552b900"
>
<Comment>The sections after the infill location are removed (will be replaced by the information from the infill MA).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
 Guid="c6fa7ae4-6313-4793-9c4f-af7d118498a4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="49f9d3f5-f1b1-4fee-978d-f4804215903f"
>MA.Sections &lt;- MAP MA.Sections USING X IN ConsiderSectionForInfill ( aSection =&gt; X, InfillDistance =&gt; InfillDistance )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Insert new sections"
 Guid="cc275007-a24c-4052-b8a4-9889e1de0b08"
>
<Comment>Adds the infill sections to the list of sections</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Insert new sections"
 Guid="ea3fb038-4a0b-46a0-932d-633093c19c71"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1b412fd4-760c-48a0-b2de-253d03b01b87"
>APPLY ExtendSections
(
    aSection =&gt; X,
    Scale =&gt; Packet.Q_SCALE,
    SectionStartTimer =&gt; SectionStartTimer
)
  ON
Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="740"
 Y="330"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ExtendSections"
 Guid="29055212-109d-4980-9bb9-baf42f12e148"
>
<ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="84cd2f51-3416-4f6e-9ff1-37130af463d1"
>
</ReqRef><Comment>Adds a MA section from the received movement authority to MA.Sections.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="aSection"
 Guid="36246957-5ff9-4d24-b41b-7e1cdcca5e0c"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
 Guid="d9585381-876e-43a5-83aa-7091db273836"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="38e11100-e282-4d18-b010-621073c43a6a"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add new section"
 Guid="ec3aa99d-2f55-4432-8995-772a4330e915"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add new section"
 Guid="6d83e799-2e61-46a1-a8d2-2c9bf71c213c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ce0beff9-e9af-4007-a828-33f30bece57b"
>INSERT
  CreateEFSSection
  (
    ERTMSSection =&gt; aSection,
    Scale =&gt; Scale,
    SectionStartTimer =&gt; SectionStartTimer
   )
IN
  MA.Sections</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="850"
 Y="330"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RepositioningInformationReceived"
 Guid="d28c0d00-54dc-4001-998e-ebb221ab6792"
>
<ReqRef
 Id="d68a643a-2faa-429a-a1d6-2724d7c3ccbc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="41541cf7-89c4-430d-9310-ef860a324b15"
>
</ReqRef><ReqRef
 Id="21484fd2-8698-4d7f-8846-76057374f929"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="81120dae-f5fe-44f7-9435-fe9816c767f5"
>
</ReqRef><Comment>Handles a REPOSITIONING_INFORMATION packet</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.REPOSITIONING_INFORMATION.Message"
 Name="Packet"
 Guid="6f05e36f-29ba-4e05-90ac-0b3e6b65e4a1"
>
</Parameter><Parameter
 Type="Default.BaseTypes.Distance"
 Name="DistanceToBG"
 Guid="f46ff854-ad58-45ee-a551-3364bafae08d"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update current section"
 Guid="eef0555f-d0cf-4c18-84b4-f03f1b1ee5df"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Several sections available"
 Guid="68bfc695-8f5c-428c-85b1-2a1023991c62"
>
<ReqRef
 Id="734f0ed2-d7d1-4a42-8fe8-058ea4441252"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="60c621ea-4f64-46fb-b51a-2bc159ca92e9"
>
</ReqRef><Comment>Updates the length of the first section of the MA, if there are multiple sections</Comment>
<PreConditions>
<PreCondition
 Guid="8ca2de13-4875-4b41-8ee8-bf5d34b237c6"
>Available ( MA ) AND MA.Sections != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3611dfd8-ce76-44f9-b77d-2ed6793b73c7"
>(FIRST X IN MA.Sections).Length &lt;- DistanceToBG + MessageTypes.QScaleLength ( length =&gt; Packet.L_SECTION, scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="One section available"
 Guid="6ca58f29-f4a7-4e32-8bd5-772a34ecc1f5"
>
<Comment>Updates the lengths of the End Section if that is the only section</Comment>
<PreConditions>
<PreCondition
 Guid="03a63234-cc66-4102-9072-1c51e26cfced"
>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9871f412-589a-449d-bf33-f3744a32d9b4"
>MA.EndSection.Length &lt;- DistanceToBG + MessageTypes.QScaleLength ( length =&gt; Packet.L_SECTION, scale =&gt; Packet.Q_SCALE )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="740"
 Y="390"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="HandleEOAs"
 Guid="079a7605-b119-4881-8fe0-ab1a2a44fac6"
>
<ReqRef
 Id="9a2c09f8-7df9-4251-9530-ae098d435bc9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d5bc343c-2bd5-42a4-b411-21e1297a523f"
>
</ReqRef><ReqRef
 Id="9a2c09f8-7df9-4251-9530-ae098d435bc9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="26235949-0290-47d5-b702-0250ff04cde4"
>
</ReqRef><ReqRef
 Id="e0b44a69-1080-47e9-80b7-b635996f4239"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5d1f7eac-e491-4122-86dd-b2a13aa335f3"
>
</ReqRef><ReqRef
 Id="f7dd0ecc-078c-4434-8d46-4ebb4b1f44f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7fc3384d-062a-4dd5-9c22-482caebed3b9"
>
</ReqRef><ReqRef
 Id="beedf65d-aba6-4017-83dd-0fe57bc88e85"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d6319d41-907d-40fd-b2fa-8fa819a2120b"
>
</ReqRef><ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ec61bbf8-d5db-4be1-bf88-2d9e0c325068"
>
</ReqRef><ReqRef
 Id="f2ddac1e-eea7-4f30-ade6-5ace543c21ae"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0fbceeeb-39e2-4552-8e31-f2a4f3bd6a49"
>
</ReqRef><ReqRef
 Id="6b1f5744-6c85-45eb-a7de-1eba5bad0131"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9e9d4748-7415-4060-9e64-d6f56747cc09"
>
</ReqRef><ReqRef
 Id="81828a4c-73e2-440d-8353-e050603f323f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d9121288-5dd2-4ebb-aa88-729be362c2ad"
>
</ReqRef><ReqRef
 Id="9a2c09f8-7df9-4251-9530-ae098d435bc9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d8ea6e27-8361-4ad4-8c5c-1e1fc592f8fb"
>
</ReqRef><Comment>Puts all the EOAs from different sources in a collection of EOAs so that the closest one can be accessed by EndOfMovementAuthority()</Comment>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Wipe the old EOAs"
 Guid="d1dfb0e0-0c44-4739-ad7b-cfd327d528fc"
>
<Comment>The end of authority remains in application for as long as the conditions defining it remain, so the EOAs should be recalculated every cycle to ensure that they remain up-to date</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Wipe the old EOAs"
 Guid="d4f6b293-937a-4acd-9eb8-fbd667b53bae"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="d69d2c39-43b3-4141-96ed-feb6a58e9a31"
>EOAs &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Route suitability EOA defined"
 Guid="e93a0965-cf33-4a59-84d4-6d40b464ccef"
>
<ReqRef
 Id="9a2c09f8-7df9-4251-9530-ae098d435bc9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b5d01e72-e616-41bb-8d89-37327b271d66"
>
</ReqRef><ReqRef
 Id="beedf65d-aba6-4017-83dd-0fe57bc88e85"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fcfcfe12-9abc-47c1-a0bc-01e7cd883b41"
>
</ReqRef><ReqRef
 Id="f27f67c3-6ff7-425e-8ab3-f3eb40f14326"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4c91cf00-bd66-4e90-b320-7d489ff22b5d"
>
</ReqRef><Comment>If the route suitability conditions define an EOA, add it to the list &apos;EOAs&apos;</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Route suitability EOA defined"
 Guid="4d1b9a4b-cb43-4a54-8481-19d72ed594c0"
>
<PreConditions>
<PreCondition
 Guid="c22fb301-b97b-4365-ae9b-88c418215162"
>TrackDescription.RouteSuitability.EOA() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="60d84cd0-88e4-48c1-b583-9815a965ca7c"
>INSERT TrackDescription.RouteSuitability.EOA()
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Conditional emergency stop"
 Guid="5d25714b-a191-4a26-ba75-f8972b9f4030"
>
<ReqRef
 Id="4f290d49-e10d-41ae-a385-d9a756df04d3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f2fd6edd-1552-447f-a689-fd596fd3c551"
>
</ReqRef><Comment>If a conditional emergency stop is applied, it creates an EOA</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Conditional emergency stop"
 Guid="199e8bb6-f70b-4b17-8aa9-6aed934ba089"
>
<PreConditions>
<PreCondition
 Guid="a7d3e9eb-090c-464f-ad59-e3fdb77f9e29"
>THERE_IS X IN EmergencyStops | ( (X.Reason == BrakeReason.OrderFromRBC) AND (X.IsConditional) )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7c64880f-bfc1-476f-a9b1-9983265c63c0"
>INSERT CreateTarget(
    aLength=&gt;Default.BaseTypes.Distance.Infinity,
    aLocation=&gt;ClosestStopLocation( EmergencyStops ).StopLocation,
    aSpeed=&gt;0.0
)
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Mode profile EOA defined"
 Guid="1b9338c9-b013-49b9-9a10-c9bbbc7e933f"
>
<Comment>If the mode profile defines an EOA, it is added to the list</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Mode profile EOA defined"
 Guid="9061e2de-2c3c-4489-9a09-85374fcdb717"
>
<PreConditions>
<PreCondition
 Guid="0b9e8510-b8db-49ba-be53-66d6ce3d9796"
>ModeProfile.EOA() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6b2dd3e1-c005-4bc7-aa88-9d2b348dc7e3"
>INSERT ModeProfile.EOA()
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Non protected LX"
 Guid="847e39f3-eb30-4f58-8528-968023595240"
>
<ReqRef
 Id="d2ff8626-b129-41d0-afab-85c0e9977832"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="82693a36-2536-4332-a326-6e2eddba3708"
>
</ReqRef><ReqRef
 Id="90d05183-dd5f-471a-929c-200da2581c34"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="970a020b-66a9-4606-9914-f20f74a55162"
>
</ReqRef><Comment>The start location of  a non protected level crossing with no stopping area shall be considered as both EOA and SvL until the train brakes to the LX permitted speed</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Non protected LX"
 Guid="a8ce68a8-6c7b-4e39-8f4a-1ddb54892e6b"
>
<PreConditions>
<PreCondition
 Guid="839cbb33-f7e4-4233-b5fe-4fccc5a07519"
>LX.SupervisedLevelCrossings != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5d428056-d867-4dff-bc94-633a9ba1c635"
>APPLY 
  INSERT CreateTarget
  (
    aLength =&gt; X.Length,
    aLocation =&gt; X.Location,
    aSpeed=&gt;0.0
  )
  IN EOAs
ON
  LX.SupervisedLevelCrossings</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Section Time-Out"
 Guid="3d8c9242-d1c1-4fe2-ad54-314fb80ef747"
>
<ReqRef
 Id="8298df3a-f507-437d-a5de-ceceaeedbead"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="10b4dbd8-787c-419d-a2c4-d3c049d494dc"
>
</ReqRef><ReqRef
 Id="99f97973-e6ed-4507-b864-54ea6e9c0fdf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c0eb2aef-0d0c-4143-bd52-f9976a670af2"
>
</ReqRef><ReqRef
 Id="6e298525-0025-4c39-8c09-9a58a38729be"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b624f108-d461-4b31-b21a-4653e3847ad5"
>
</ReqRef><ReqRef
 Id="2c2aa4b4-7362-44d9-b7ec-bd064ad99f4f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="275b9be9-69e2-49ac-881e-073d5767aee7"
>
</ReqRef><ReqRef
 Id="430d4f07-d2b9-4364-a2e5-17353db2175e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f485d1f4-cc12-44d2-b9f9-4cf8f01fbb58"
>
</ReqRef><Comment>If a section timer reaches the time-out vale, the EOA is withdrawn to the entry point of the revoked section</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Section Time-Out"
 Guid="6f0f4bd6-c430-4cdc-b3c0-66ff2bc97b5c"
>
<PreConditions>
<PreCondition
 Guid="24d938c7-fe0b-4f4d-b9a9-b308a3518179"
>Available(MATimers.TimedOutSection())</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5f20e14d-76f0-46f6-a32a-fe2c3ff671d7"
>INSERT CreateTarget(
    aLength=&gt;Default.BaseTypes.Length.Infinity,
    aLocation=&gt;MATimers.TimeOutSectionStart(),
    aSpeed=&gt;0.0
)
IN EOAs</Action><Action
 Guid="4a877f2e-ffe8-4dd8-b245-926bded39f26"
>HandlingOfAcceptedAndStoredInformation.SectionTimeOutShortensMA &lt;- True</Action><Action
 Guid="4c4fc0db-b651-45f3-9bcc-b947f3342dc6"
>SpeedAndDistanceMonitoring.ReleaseSpeedMonitoring.UpdateReleaseSpeed()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="End section Time-Out"
 Guid="3c231673-484e-4b1f-8127-c2aebe5ace5a"
>
<ReqRef
 Id="7e423212-aebc-4610-85f4-e4a25b5e05c4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="864d6637-2a3a-4a02-a244-fe7d34655bc1"
>
</ReqRef><ReqRef
 Id="e199cc01-44ca-4dc8-bc13-df147bf2bf53"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="563d5650-81f1-478d-8915-22d5fcfb05e9"
>
</ReqRef><ReqRef
 Id="f628074f-59c1-494b-b268-4ca4bf339038"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="520be93f-f893-4bc2-a97a-59c0de15ba88"
>
</ReqRef><ReqRef
 Id="c6215fef-5d78-4d0c-bab4-b041b7e0c571"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="858ace2b-ee4b-4031-990c-4feb3ee505a7"
>
</ReqRef><ReqRef
 Id="1e99ff79-c41c-4625-9938-941b2814fbc6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7b706042-9769-4d9c-98d4-7b90528a099e"
>
</ReqRef><Comment>If the end section timer vlue becomes greater than the time-out value</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="End section Time-Out"
 Guid="3e46954a-1903-4156-8318-b10f70834a11"
>
<PreConditions>
<PreCondition
 Guid="7c58a301-5e31-4d0c-91de-e2e64df6d1f7"
>MA.MA.EndSection.EndSectionTimeOut != EMPTY
  AND
MA.MATimers.EndSectionTimerStart != BaseTypes.Time.NA
  AND  
(DateAndTime.CurrentTime &gt; MATimers.EndSectionTimerStart + MA.MA.EndSection.EndSectionTimeOut.TimeOut)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="87845b6e-e345-4f5d-b307-e656fca337bb"
>INSERT CreateTarget(
    aLength=&gt;Default.BaseTypes.Length.Infinity,
    aLocation=&gt;TrainPosition.FrontEndPosition(PointOfInterest=&gt;Default.DistanceInterval.Nom),
    aSpeed=&gt;0.0
)
IN EOAs</Action><Action
 Guid="a54a01c8-60c3-4dff-9b28-5075998c6a6b"
>HandlingOfAcceptedAndStoredInformation.EndSectionTimeOutShortensMA &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Sections are defined in the MA"
 Guid="64e84d24-7541-455b-b8bf-c6234f657b89"
>
<Comment>Standard EOA in the case when the MA has multiple sections</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Sections are defined in the MA"
 Guid="53902d05-920e-4e51-85a9-88455db09318"
>
<PreConditions>
<PreCondition
 Guid="a779a5e2-a7b0-4b37-b922-68e77593783c"
>THERE_IS X IN MA.Sections | X != EMPTY</PreCondition><PreCondition
 Guid="2da1cafb-98d9-4a61-bd3d-495c6e434301"
>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="02a0d872-3ea1-48ef-a8ac-d2b605a7ef3b"
>INSERT
CreateTarget (
    aSpeed =&gt; MA.TargetSpeed,
    aLocation =&gt; Default.BaseTypes.LengthToDistance ( (SUM MA.Sections USING X IN X.Length) + MA.EndSection.Length),
    aLength =&gt; Default.BaseTypes.Length.Infinity
)
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="No sections are defined in the MA"
 Guid="7777f16f-e92e-4374-9647-86584bd158e1"
>
<Comment>Standard EOA in the case where the MA only has one section</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No sections are defined in the MA"
 Guid="4cc58661-4b9d-4c01-8b53-b6546fa5a4f7"
>
<PreConditions>
<PreCondition
 Guid="dfcefb13-769a-429a-977d-4dcc97933ad3"
>FORALL X IN MA.Sections | X == EMPTY</PreCondition><PreCondition
 Guid="08a4286f-ccdb-4e73-80bf-91bdbdf925e0"
>Available ( MA )</PreCondition></PreConditions>
<Actions>
<Action
 Guid="27ea72e8-4e70-4326-b736-bd2fb8e26a62"
>INSERT CreateTarget (
    aSpeed =&gt; MA.TargetSpeed,
    aLocation =&gt; Default.BaseTypes.LengthToDistance( MA.EndSection.Length),
    aLength =&gt; Default.BaseTypes.Length.Infinity
 )
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="No EOA received"
 Guid="ae6b3e38-8dd5-460c-8ad5-2b102ea9030a"
>
<Comment>If there are no EOAs defined on-board, generate a virtual one at infinity</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No EOA Received"
 Guid="bcf932ff-b89d-40c6-86c4-5c6d922897f9"
>
<PreConditions>
<PreCondition
 Guid="fc363c6b-90b4-4cba-b409-5fcabbca8ef5"
>EOAs == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="777d7877-37bc-43a8-96a2-f67253857249"
>INSERT CreateTarget (
    aSpeed =&gt; 0.0,
    aLocation =&gt; Default.BaseTypes.Distance.Infinity,
    aLength =&gt; Default.BaseTypes.Length.Infinity
 )
IN EOAs</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="850"
 Y="390"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="HandleSvLs"
 Guid="44193527-6144-4bde-b7b0-f826e9baf559"
>
<ReqRef
 Id="f7dd0ecc-078c-4434-8d46-4ebb4b1f44f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e29ce0e6-67c8-48c8-bde0-37426779df1c"
>
</ReqRef><ReqRef
 Id="beedf65d-aba6-4017-83dd-0fe57bc88e85"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6e02d145-242e-4e02-864d-67b0608c36a8"
>
</ReqRef><ReqRef
 Id="8ab7aafb-d8cf-4c4d-bafc-08a1f658decd"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="527c2cda-bcf3-4fc8-85f9-a917799c20bd"
>
</ReqRef><ReqRef
 Id="f2ddac1e-eea7-4f30-ade6-5ace543c21ae"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="cb52ebf0-076c-4e0e-893c-498bf1549740"
>
</ReqRef><ReqRef
 Id="6b1f5744-6c85-45eb-a7de-1eba5bad0131"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9ceafef7-0fa9-4546-aac1-294f5658a692"
>
</ReqRef><ReqRef
 Id="81828a4c-73e2-440d-8353-e050603f323f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="58f0c344-8b9d-4e54-b97d-2418f08eb4d8"
>
</ReqRef><ReqRef
 Id="dc0bc969-44fc-43da-bc2e-a002f4c15435"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6985d93c-d45b-462f-98dd-5399758cd705"
>
</ReqRef><Comment>Puts all the SvLs from different sources in a collection of SvLs so that the closest one can be accessed by SvL(), then checks for a MA shortening</Comment>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Wipe the old SvLs"
 Guid="9fb13f00-bc38-439d-8cf4-92fc814ccce5"
>
<Comment>Deletes the previous SvLs. The location of the previous SvL has been saved in ShorteningHandler for comparison</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Wipe the old SvLs"
 Guid="5678bbbf-0138-4fa2-90ce-02471f1330ca"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="9d52eeaf-526c-4b5e-90ef-3dae9c952522"
>SvLs &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="MakeSvLs"
 Guid="c99a0d2f-7892-4169-a275-6b01cb25ef22"
>
<Comment>Put all the different SvLs into the collection</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Make SvLs"
 Guid="8da11eed-5625-483a-baed-4fb1f16285b2"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Route suitability SvL defined"
 Guid="61e6b7c2-b5bf-4299-9feb-a6acf9331eb0"
>
<Comment>If the route suitability conditions define a SvL, add it to the list</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Route suitability SvL defined"
 Guid="05b9511b-476b-4a4f-b3c3-37ac673d81da"
>
<PreConditions>
<PreCondition
 Guid="96b46e57-19ae-42d1-a66d-a8e9a497d529"
>TrackDescription.RouteSuitability.SvL() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f9b0a2c0-aaa2-4b2d-a561-bda09265f421"
>INSERT TrackDescription.RouteSuitability.SvL()
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="SvL defined, overlap"
 Guid="60a9ca7b-f818-477c-8140-41f1f1be7133"
>
<ReqRef
 Id="8ab7aafb-d8cf-4c4d-bafc-08a1f658decd"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1891bee3-6ea3-4dd0-aad2-4ec1aa018cc7"
>
</ReqRef><ReqRef
 Id="86d7ebf1-9563-46b7-aa16-3438b5748a12"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="14339948-605f-42f8-8b4a-84039382f4ae"
>
</ReqRef><Comment>If there is an overlap without danger point, that is the SvL</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="SvL defined, overlap"
 Guid="16caef1e-67f4-48f5-865e-7b2864b695be"
>
<PreConditions>
<PreCondition
 Guid="215f42e0-2b31-4277-bb6c-812e8ea8e88c"
>MA.EndSection.Overlap != EMPTY</PreCondition><PreCondition
 Guid="6b5b5cca-2abe-4a35-ba48-722d6a43cbdd"
>MA.TargetSpeed == 0.0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b2167c03-e084-4419-9978-0e92dc27be2f"
>INSERT CreateTarget (
    aLocation =&gt; OverlapLocation(),
    aSpeed =&gt; 0.0,
    aLength =&gt; BaseTypes.Length.Infinity
 )
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Mode Profile SvL defined"
 Guid="2f7536e1-df41-45eb-b4e0-eb52f6bd8bfe"
>
<Comment>If the mode profile defines a SvL, add it to the list</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Mode Profile SvL defined"
 Guid="c7f6602d-6c44-41c4-bb57-fc915f5bb37a"
>
<PreConditions>
<PreCondition
 Guid="1d8e1ac3-45b7-4f98-a932-63db1f3403e2"
>ModeProfile.SvL() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="03a7f8e6-3334-4d8e-8c4c-76bc70bfe7cb"
>INSERT ModeProfile.SvL()
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Section Time-Out"
 Guid="b9f18e83-2758-434a-8799-bf5684660dbd"
>
<ReqRef
 Id="8298df3a-f507-437d-a5de-ceceaeedbead"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="06a58317-0803-4813-9ff9-1c7997186c9b"
>
</ReqRef><ReqRef
 Id="99f97973-e6ed-4507-b864-54ea6e9c0fdf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2788831c-f6fa-4e98-8072-426c4fe4f606"
>
</ReqRef><Comment>If a section timer reaches the time-out vale, the SvL is withdrawn to the entry point of the revoked section</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Section Time-Out"
 Guid="5232f333-d017-499d-a726-6131d5190973"
>
<PreConditions>
<PreCondition
 Guid="36301967-8c3d-4b27-a9d7-6bd8fc20a95e"
>Available(MATimers.TimedOutSection())</PreCondition></PreConditions>
<Actions>
<Action
 Guid="10e9c9f8-f0a4-41d3-9b16-6ffd1920e288"
>INSERT CreateTarget(
    aLength=&gt;Default.BaseTypes.Length.Infinity,
    aLocation=&gt;MATimers.TimeOutSectionStart(),
    aSpeed=&gt;0.0
)
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Non protected LX"
 Guid="043c8302-2385-4eaa-8096-529cf295b598"
>
<ReqRef
 Id="d2ff8626-b129-41d0-afab-85c0e9977832"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="817206bd-6c5f-42c0-b063-fe923c403ad1"
>
</ReqRef><ReqRef
 Id="90d05183-dd5f-471a-929c-200da2581c34"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="016b2cee-fc07-4e2c-908e-707833067147"
>
</ReqRef><Comment>The start location of  a non protected level crossing with no stopping area shall be considered as both EOA and SvL until the train brakes to the LX permitted speed</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Non protected LX"
 Guid="f45c04fc-103c-4512-922c-e31745264171"
>
<PreConditions>
<PreCondition
 Guid="95230fbf-fc08-4439-860f-125265afa0df"
>LX.SupervisedLevelCrossings != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9274d1c1-4a76-4102-970e-4758a11502ca"
>APPLY 
  INSERT CreateTarget
  (
    aLength =&gt; X.Length,
    aLocation =&gt; X.Location,
    aSpeed =&gt; 0.0
  )
  IN SvLs
ON
  LX.SupervisedLevelCrossings</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="SvL defined, danger point"
 Guid="a682c1be-3a5c-43f5-8709-bc749814aea9"
>
<ReqRef
 Id="8ab7aafb-d8cf-4c4d-bafc-08a1f658decd"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="55a23945-3bc5-43a4-ac22-589e7d940e6c"
>
</ReqRef><ReqRef
 Id="4ef17641-9a1d-4bc2-8486-61f1ccefa8b7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b69c8549-e51a-4267-8d61-3c044ef01a8e"
>
</ReqRef><Comment>If the MA includes a danger point, that is the SvL</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="SvL defined, danger point"
 Guid="cc5f6b61-b71d-41cd-befc-5e2620ed46e7"
>
<Comment>The Overlap precondition is to satisfy requirement 3.8.4.5.1</Comment>
<PreConditions>
<PreCondition
 Guid="dc70bb5c-8f5e-4284-8073-ab38322d16d0"
>MA.EndSection.DangerPoint != EMPTY</PreCondition><PreCondition
 Guid="262a6363-57ea-4522-99e7-96d5519e8ab9"
>MA.TargetSpeed == 0.0</PreCondition><PreCondition
 Guid="ae7d6bee-201a-437a-98be-2b8c4fe2bdf7"
>MA.EndSection.Overlap == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="34b23ee0-eb06-43b4-834f-1245e46fcd95"
>INSERT CreateTarget (
    aLocation =&gt; DangerPointLocation(),
    aSpeed =&gt; 0.0,
    aLength =&gt; BaseTypes.Length.Infinity
 )
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="SvL defined, end of authority"
 Guid="add55289-5851-4a82-8a09-767a54d257e0"
>
<ReqRef
 Id="8ab7aafb-d8cf-4c4d-bafc-08a1f658decd"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4e34979f-f382-4343-b957-f1aa0e10be7a"
>
</ReqRef><ReqRef
 Id="0ea37cf1-0784-4056-93b3-f14f8d6a586b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="984f8361-e08f-4f3f-b4a1-d30484c137b2"
>
</ReqRef><Comment>If the MA has an end of authority, that it the SvL</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="SvL defined, end of authority"
 Guid="19a994c4-8233-47d8-997a-66cdb96719d7"
>
<Comment>The Overlap and DangerPoint requirements are to satisfy requirement 3.8.4.5.1</Comment>
<PreConditions>
<PreCondition
 Guid="cc1d2851-a9ce-4ad2-941e-668f3bec546f"
>MA.TargetSpeed == 0.0</PreCondition><PreCondition
 Guid="bccc0d0b-6604-4341-9629-54a2ab408b8d"
>MA.EndSection.Overlap == EMPTY</PreCondition><PreCondition
 Guid="1691be27-3707-48d7-bc85-f83554fae8b7"
>MA.EndSection.DangerPoint == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3bf7458d-7f9b-4188-94f9-8c6a0c847b12"
>INSERT CreateTarget(
    aLocation =&gt; ClosestEOA().Location,
    aSpeed =&gt; 0.0,
    aLength =&gt; BaseTypes.Length.Infinity
)
IN SvLs</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Test MA shortening"
 Guid="a8c4a7ff-07ac-457c-982d-0b32970fd916"
>
<ReqRef
 Id="426e405f-a69a-4fd6-b4cb-f0b3e7808f5e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f10c4776-b68d-4088-aa6a-c3cbe7d45c55"
>
</ReqRef><ReqRef
 Id="21484fd2-8698-4d7f-8846-76057374f929"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a37899ee-82e3-4495-8744-4d66d0c37256"
>
</ReqRef><Comment>In case the previous MA had an SvL and the new SvL is closer, this is an MA shortening.

In case the previous End of Authority was an LOA and the new MA has an SvL, this is an MA shortening regardless of the SvL location.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="TestMaShorteningRegardlessOfSvL"
 Guid="747f5221-9312-4c6b-a8b4-43eedbef37d7"
>
<ReqRef
 Id="0c39084a-19e8-4784-962f-8dd4ba8a2aee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="751193e0-d3dc-496f-b5c1-a4ba25f90ed5"
>
</ReqRef><Comment>Shortened MA when the old EOA was not the SvL</Comment>
<PreConditions>
<PreCondition
 Guid="19bccdbd-f627-4eb6-b555-242fd599ad68"
>ShorteningHandler != EMPTY
  AND
NOT ShorteningHandler.IsSvL
  AND
SvL() != EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="56a0218a-5e6a-46da-94f5-1773ffcbf281"
>HandlingOfAcceptedAndStoredInformation.ShortenedMaReceivedRegardlessOfSvL &lt;- True</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="TestMaShortening"
 Guid="4093f2fd-8373-409b-9371-16b0310daed0"
>
<ReqRef
 Id="d8e470e4-30ad-41be-8c8d-9828fc218d73"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fdd43860-3619-44d2-bc12-1eea6acc5a46"
>
</ReqRef><Comment>Shortened MA when the old EOA was the SvL</Comment>
<PreConditions>
<PreCondition
 Guid="2f33e75d-0cbd-41cd-a3c1-be78ac425e45"
>ShorteningHandler != EMPTY
  AND
ShorteningHandler.IsSvL
  AND
SvL() != EMPTY
  AND
SvL().Location &lt; ShorteningHandler.Location</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c5a9f8e6-962f-4e24-9a60-4e8aa640da0c"
>HandlingOfAcceptedAndStoredInformation.ShortenedMaReceived &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="850"
 Y="150"
 Width="100"
 Height="50"
 NeedsRequirement="FALSE"
 Name="InitializeElementsForMA"
 Guid="308f7a88-e9cd-4e48-bbc1-66b9b6ccc0a1"
>
<Comment>Sets default values for tests involving the Movement Authority</Comment>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Initialize SSP + Gradients"
 Guid="1e2c9bd5-c3d2-4d13-aada-2bd07896904a"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Initialize SSP + Gradients"
 Guid="d7839432-4eec-4ec7-971d-4648f059b30c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3615ce68-522a-4f37-9745-49d04c0543b3"
>TrackDescription.Gradient.Gradients &lt;-
[
    TrackDescription.Gradient.GradientInfo
    {
        Distance =&gt; 0.0,
        Gradient =&gt; 0.7
    },
    TrackDescription.Gradient.GradientInfo
    {
        Distance =&gt; 4800.0,
        Gradient =&gt; 0.94
    }
]</Action><Action
 Guid="1613d496-73f3-4873-ac23-ca4bc8624aa1"
>TrackDescription.StaticSpeedProfile.SSP &lt;-
[
    TrackDescription.StaticSpeedProfile.StaticSpeedRestriction
    {
        Distance =&gt; 0.0,
        BasicSpeed =&gt; 70.0,
        TrainLengthDelay =&gt; Messages.Q_FRONT.No_train_length_delay_on_validity_end_point_of_profile_element,
        Categories =&gt;
        [
            TrackDescription.StaticSpeedProfile.SSPCategory
            {
                CantDeficiency =&gt; Messages.NC_CDTRAIN.Cant_Deficiency_130_mm,
                OtherSpecific =&gt; TrainData.TrainCategoryEnum.FreightTrainInG,
                Qualifier =&gt; Messages.Q_DIFF.Cant_Deficiency_specific_category ,
                Speed =&gt; 70.0
            }
        ]
    }
]</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="740"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RelocateMAinEndSection"
 Guid="8e61013b-1ca2-4f82-96aa-b10e0fd7aecb"
>
<Comment>Procedure for changing the MA&apos;s reference location when the train is in the end section of an MA that included sections (other cases are handled directly in BTM.HandleNewLRBG)</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="Distance"
 Guid="d48bf562-1a9b-4f42-8727-2757f7487fb3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update end section length"
 Guid="831464f9-d18c-4fd0-9345-87b8a8ffa310"
>
<Comment>The first step is to update the end section length</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Update end section length"
 Guid="040e9133-3abd-4f75-acb6-76467a44bcc7"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="04789b87-d062-4c84-a0db-e72332a49ffb"
>MA.EndSection.Length &lt;- MA.EndSection.Length - BaseTypes.DistanceToLength(Distance - EndSectionStart())</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove previous sections"
 Guid="55842685-15a9-4ae6-9e0a-7c522ad44b46"
>
<Comment>Then, since they have been passed, delete all the sections in the MA</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove previous sections"
 Guid="5f6737a2-57d5-4500-8da3-2f2479b48b6b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3a327ab0-2da8-409a-93eb-dccb9bfd2696"
>MA.Sections &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="Kernel.MA.MAStruct"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 X="160"
 Y="340"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="MA"
 Guid="3b49e60e-534c-48a7-af15-a4a583b52078"
>
<ReqRef
 Id="f4723221-15fd-4636-851f-08a437cc18e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1c5ab3cc-f25c-4b97-b525-837d987c11f2"
>
</ReqRef><ReqRef
 Id="ab682687-0117-4289-925f-65a6680a3644"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2c89ac4f-6e85-47a4-99da-fd1c5709b7cf"
>
</ReqRef><ReqRef
 Id="200c6541-d8d8-43b9-b5c0-4f586318bbce"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f323f4cd-0663-486c-a275-2067123ceb90"
>
</ReqRef><Comment>Represents the Movement Authority.</Comment>
</Variable><Variable
 Type="Default.BaseTypes.Speed"
 DefaultValue="Default.BaseTypes.Speed.MaxSpeed"
 VariableMode="Internal"
 X="740"
 Y="510"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SignallingRelatedSpeedRestriction"
 Guid="59169bbb-dab1-434c-825e-21145fe95855"
>
<ReqRef
 Id="6d40cd91-a858-435e-83bf-8b5fd647e114"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="09ebf445-479d-46d8-b2df-2a40ca738b5a"
>
</ReqRef><ReqRef
 Id="5d3380ae-3cb4-4f42-a7ba-d37280d33119"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d2dbe36b-2a6a-4bcb-92a2-42a0dd57280e"
>
</ReqRef><ReqRef
 Id="d949102e-f89b-489f-8acc-cf60824bd0e5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a9ef89c7-aaaf-41bf-889c-ffea1626e8b7"
>
</ReqRef><ReqRef
 Id="4a580e9d-fd64-4951-b7a4-51530d1469e7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2944ad0c-ff6e-415b-bf47-5f03f4297c4b"
>
</ReqRef><Comment>Represents the signalling related speed restriction. Value = 0 corresponds to train trip.</Comment>
</Variable><Variable
 Type="Kernel.MA.MaShorteningHandler"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 X="20"
 Y="650"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ShorteningHandler"
 Guid="4a84e04c-5296-4803-9519-1233bcea12c0"
>
<ReqRef
 Id="d8e470e4-30ad-41be-8c8d-9828fc218d73"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4985de94-9939-42e2-a772-348ca4911c60"
>
</ReqRef><ReqRef
 Id="0c39084a-19e8-4784-962f-8dd4ba8a2aee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="30c810b7-ddf3-4912-b5ca-8e3e4778799d"
>
</ReqRef><Comment>Allows to verify if the MA was shortened (possibly regardless of SvL location).</Comment>
</Variable><Variable
 Type="TargetsCol"
 DefaultValue=""
 VariableMode="Internal"
 X="20"
 Y="500"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SvLs"
 Guid="a971b150-ed0b-461c-910c-3339b1170397"
>
<Comment>This is a collection holding all the locations designated as supervision limit according to different external inputs</Comment>
</Variable><Variable
 Type="TargetsCol"
 DefaultValue=""
 VariableMode="Internal"
 X="20"
 Y="440"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="EOAs"
 Guid="f864823e-e761-4bb2-86c4-e7f5a9e70182"
>
<Comment>This variable is a collection holding all the locations designated as end of authority, along with the speed limit and distance of the EOA</Comment>
</Variable><Variable
 Type="Boolean"
 DefaultValue="False"
 VariableMode="Internal"
 X="860"
 Y="510"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="MAIsAccepted"
 Guid="e2e5ee29-3d1d-4597-abaa-7dc7252ecc33"
>
<ReqRef
 Id="63f87a6b-8c3e-4333-b97e-9e417e3623d8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ff3b50f9-1e06-4425-947f-9193f2285c92"
>
</ReqRef><Comment>Indicates if the MA was accepted. Used to determine if the corresponding mode profile can be accepted.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="CleanUp"
 X="240"
 Y="740"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CleanUp"
 Guid="7de635e8-9b4c-414d-9952-c3c4e222f48b"
>
<Comment>Clears the temporary variable indicating if the MA was accepted.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CleanUp"
 Guid="c72e1234-805d-4b1e-b806-5849f3aac6fd"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="0209332a-b329-41fe-be81-67f6ff5c367a"
>MAIsAccepted &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>
